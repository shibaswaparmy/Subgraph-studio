// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class StakeManagerOwnershipTransferred extends ethereum.Event {
  get params(): StakeManagerOwnershipTransferred__Params {
    return new StakeManagerOwnershipTransferred__Params(this);
  }
}

export class StakeManagerOwnershipTransferred__Params {
  _event: StakeManagerOwnershipTransferred;

  constructor(event: StakeManagerOwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class RootChainChanged extends ethereum.Event {
  get params(): RootChainChanged__Params {
    return new RootChainChanged__Params(this);
  }
}

export class RootChainChanged__Params {
  _event: RootChainChanged;

  constructor(event: RootChainChanged) {
    this._event = event;
  }

  get previousRootChain(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newRootChain(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class StakeManager__validatorAuctionResult {
  value0: BigInt;
  value1: BigInt;
  value2: Address;
  value3: boolean;
  value4: Bytes;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: Address,
    value3: boolean,
    value4: Bytes
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromBoolean(this.value3));
    map.set("value4", ethereum.Value.fromBytes(this.value4));
    return map;
  }

  getAmount(): BigInt {
    return this.value0;
  }

  getStartEpoch(): BigInt {
    return this.value1;
  }

  getUser(): Address {
    return this.value2;
  }

  getAcceptDelegation(): boolean {
    return this.value3;
  }

  getSignerPubkey(): Bytes {
    return this.value4;
  }
}

export class StakeManager__validatorStateResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getAmount(): BigInt {
    return this.value0;
  }

  getStakerCount(): BigInt {
    return this.value1;
  }
}

export class StakeManager__validatorStateChangesResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromSignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromSignedBigInt(this.value1));
    return map;
  }

  getAmount(): BigInt {
    return this.value0;
  }

  getStakerCount(): BigInt {
    return this.value1;
  }
}

export class StakeManager__validatorsResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: Address;
  value6: Address;
  value7: i32;
  value8: BigInt;
  value9: BigInt;
  value10: BigInt;
  value11: BigInt;
  value12: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: Address,
    value6: Address,
    value7: i32,
    value8: BigInt,
    value9: BigInt,
    value10: BigInt,
    value11: BigInt,
    value12: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
    this.value10 = value10;
    this.value11 = value11;
    this.value12 = value12;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromAddress(this.value5));
    map.set("value6", ethereum.Value.fromAddress(this.value6));
    map.set(
      "value7",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value7))
    );
    map.set("value8", ethereum.Value.fromUnsignedBigInt(this.value8));
    map.set("value9", ethereum.Value.fromUnsignedBigInt(this.value9));
    map.set("value10", ethereum.Value.fromUnsignedBigInt(this.value10));
    map.set("value11", ethereum.Value.fromUnsignedBigInt(this.value11));
    map.set("value12", ethereum.Value.fromUnsignedBigInt(this.value12));
    return map;
  }

  getAmount(): BigInt {
    return this.value0;
  }

  getReward(): BigInt {
    return this.value1;
  }

  getActivationEpoch(): BigInt {
    return this.value2;
  }

  getDeactivationEpoch(): BigInt {
    return this.value3;
  }

  getJailTime(): BigInt {
    return this.value4;
  }

  getSigner(): Address {
    return this.value5;
  }

  getContractAddress(): Address {
    return this.value6;
  }

  getStatus(): i32 {
    return this.value7;
  }

  getCommissionRate(): BigInt {
    return this.value8;
  }

  getLastCommissionUpdate(): BigInt {
    return this.value9;
  }

  getDelegatorsReward(): BigInt {
    return this.value10;
  }

  getDelegatedAmount(): BigInt {
    return this.value11;
  }

  getInitialRewardPerStake(): BigInt {
    return this.value12;
  }
}

export class StakeManager extends ethereum.SmartContract {
  static bind(address: Address): StakeManager {
    return new StakeManager("StakeManager", address);
  }

  CHECKPOINT_REWARD(): BigInt {
    let result = super.call(
      "CHECKPOINT_REWARD",
      "CHECKPOINT_REWARD():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_CHECKPOINT_REWARD(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "CHECKPOINT_REWARD",
      "CHECKPOINT_REWARD():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  NFTContract(): Address {
    let result = super.call("NFTContract", "NFTContract():(address)", []);

    return result[0].toAddress();
  }

  try_NFTContract(): ethereum.CallResult<Address> {
    let result = super.tryCall("NFTContract", "NFTContract():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  NFTCounter(): BigInt {
    let result = super.call("NFTCounter", "NFTCounter():(uint256)", []);

    return result[0].toBigInt();
  }

  try_NFTCounter(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("NFTCounter", "NFTCounter():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  WITHDRAWAL_DELAY(): BigInt {
    let result = super.call(
      "WITHDRAWAL_DELAY",
      "WITHDRAWAL_DELAY():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_WITHDRAWAL_DELAY(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "WITHDRAWAL_DELAY",
      "WITHDRAWAL_DELAY():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  accountStateRoot(): Bytes {
    let result = super.call(
      "accountStateRoot",
      "accountStateRoot():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_accountStateRoot(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "accountStateRoot",
      "accountStateRoot():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  auctionPeriod(): BigInt {
    let result = super.call("auctionPeriod", "auctionPeriod():(uint256)", []);

    return result[0].toBigInt();
  }

  try_auctionPeriod(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "auctionPeriod",
      "auctionPeriod():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  checkPointBlockInterval(): BigInt {
    let result = super.call(
      "checkPointBlockInterval",
      "checkPointBlockInterval():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_checkPointBlockInterval(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "checkPointBlockInterval",
      "checkPointBlockInterval():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  checkSignatures(
    blockInterval: BigInt,
    voteHash: Bytes,
    stateRoot: Bytes,
    proposer: Address,
    sigs: Array<Array<BigInt>>
  ): BigInt {
    let result = super.call(
      "checkSignatures",
      "checkSignatures(uint256,bytes32,bytes32,address,uint256[3][]):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(blockInterval),
        ethereum.Value.fromFixedBytes(voteHash),
        ethereum.Value.fromFixedBytes(stateRoot),
        ethereum.Value.fromAddress(proposer),
        ethereum.Value.fromUnsignedBigIntMatrix(sigs)
      ]
    );

    return result[0].toBigInt();
  }

  try_checkSignatures(
    blockInterval: BigInt,
    voteHash: Bytes,
    stateRoot: Bytes,
    proposer: Address,
    sigs: Array<Array<BigInt>>
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "checkSignatures",
      "checkSignatures(uint256,bytes32,bytes32,address,uint256[3][]):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(blockInterval),
        ethereum.Value.fromFixedBytes(voteHash),
        ethereum.Value.fromFixedBytes(stateRoot),
        ethereum.Value.fromAddress(proposer),
        ethereum.Value.fromUnsignedBigIntMatrix(sigs)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  checkpointRewardDelta(): BigInt {
    let result = super.call(
      "checkpointRewardDelta",
      "checkpointRewardDelta():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_checkpointRewardDelta(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "checkpointRewardDelta",
      "checkpointRewardDelta():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  currentEpoch(): BigInt {
    let result = super.call("currentEpoch", "currentEpoch():(uint256)", []);

    return result[0].toBigInt();
  }

  try_currentEpoch(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("currentEpoch", "currentEpoch():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  currentValidatorSetSize(): BigInt {
    let result = super.call(
      "currentValidatorSetSize",
      "currentValidatorSetSize():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_currentValidatorSetSize(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "currentValidatorSetSize",
      "currentValidatorSetSize():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  currentValidatorSetTotalStake(): BigInt {
    let result = super.call(
      "currentValidatorSetTotalStake",
      "currentValidatorSetTotalStake():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_currentValidatorSetTotalStake(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "currentValidatorSetTotalStake",
      "currentValidatorSetTotalStake():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  delegatedAmount(validatorId: BigInt): BigInt {
    let result = super.call(
      "delegatedAmount",
      "delegatedAmount(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(validatorId)]
    );

    return result[0].toBigInt();
  }

  try_delegatedAmount(validatorId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "delegatedAmount",
      "delegatedAmount(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(validatorId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  delegationDeposit(
    validatorId: BigInt,
    amount: BigInt,
    delegator: Address
  ): boolean {
    let result = super.call(
      "delegationDeposit",
      "delegationDeposit(uint256,uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(validatorId),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromAddress(delegator)
      ]
    );

    return result[0].toBoolean();
  }

  try_delegationDeposit(
    validatorId: BigInt,
    amount: BigInt,
    delegator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "delegationDeposit",
      "delegationDeposit(uint256,uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(validatorId),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromAddress(delegator)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  delegationEnabled(): boolean {
    let result = super.call(
      "delegationEnabled",
      "delegationEnabled():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_delegationEnabled(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "delegationEnabled",
      "delegationEnabled():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  delegatorsReward(validatorId: BigInt): BigInt {
    let result = super.call(
      "delegatorsReward",
      "delegatorsReward(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(validatorId)]
    );

    return result[0].toBigInt();
  }

  try_delegatorsReward(validatorId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "delegatorsReward",
      "delegatorsReward(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(validatorId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  dynasty(): BigInt {
    let result = super.call("dynasty", "dynasty():(uint256)", []);

    return result[0].toBigInt();
  }

  try_dynasty(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("dynasty", "dynasty():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  epoch(): BigInt {
    let result = super.call("epoch", "epoch():(uint256)", []);

    return result[0].toBigInt();
  }

  try_epoch(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("epoch", "epoch():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  eventsHub(): Address {
    let result = super.call("eventsHub", "eventsHub():(address)", []);

    return result[0].toAddress();
  }

  try_eventsHub(): ethereum.CallResult<Address> {
    let result = super.tryCall("eventsHub", "eventsHub():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  extensionCode(): Address {
    let result = super.call("extensionCode", "extensionCode():(address)", []);

    return result[0].toAddress();
  }

  try_extensionCode(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "extensionCode",
      "extensionCode():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getRegistry(): Address {
    let result = super.call("getRegistry", "getRegistry():(address)", []);

    return result[0].toAddress();
  }

  try_getRegistry(): ethereum.CallResult<Address> {
    let result = super.tryCall("getRegistry", "getRegistry():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getValidatorContract(validatorId: BigInt): Address {
    let result = super.call(
      "getValidatorContract",
      "getValidatorContract(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(validatorId)]
    );

    return result[0].toAddress();
  }

  try_getValidatorContract(validatorId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getValidatorContract",
      "getValidatorContract(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(validatorId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getValidatorId(user: Address): BigInt {
    let result = super.call(
      "getValidatorId",
      "getValidatorId(address):(uint256)",
      [ethereum.Value.fromAddress(user)]
    );

    return result[0].toBigInt();
  }

  try_getValidatorId(user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getValidatorId",
      "getValidatorId(address):(uint256)",
      [ethereum.Value.fromAddress(user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  governance(): Address {
    let result = super.call("governance", "governance():(address)", []);

    return result[0].toAddress();
  }

  try_governance(): ethereum.CallResult<Address> {
    let result = super.tryCall("governance", "governance():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isOwner(): boolean {
    let result = super.call("isOwner", "isOwner():(bool)", []);

    return result[0].toBoolean();
  }

  try_isOwner(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isOwner", "isOwner():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isValidator(validatorId: BigInt): boolean {
    let result = super.call("isValidator", "isValidator(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(validatorId)
    ]);

    return result[0].toBoolean();
  }

  try_isValidator(validatorId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("isValidator", "isValidator(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(validatorId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  latestSignerUpdateEpoch(param0: BigInt): BigInt {
    let result = super.call(
      "latestSignerUpdateEpoch",
      "latestSignerUpdateEpoch(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_latestSignerUpdateEpoch(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "latestSignerUpdateEpoch",
      "latestSignerUpdateEpoch(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  locked(): boolean {
    let result = super.call("locked", "locked():(bool)", []);

    return result[0].toBoolean();
  }

  try_locked(): ethereum.CallResult<boolean> {
    let result = super.tryCall("locked", "locked():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  logger(): Address {
    let result = super.call("logger", "logger():(address)", []);

    return result[0].toAddress();
  }

  try_logger(): ethereum.CallResult<Address> {
    let result = super.tryCall("logger", "logger():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  maxRewardedCheckpoints(): BigInt {
    let result = super.call(
      "maxRewardedCheckpoints",
      "maxRewardedCheckpoints():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_maxRewardedCheckpoints(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maxRewardedCheckpoints",
      "maxRewardedCheckpoints():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  minDeposit(): BigInt {
    let result = super.call("minDeposit", "minDeposit():(uint256)", []);

    return result[0].toBigInt();
  }

  try_minDeposit(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("minDeposit", "minDeposit():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  minHeimdallFee(): BigInt {
    let result = super.call("minHeimdallFee", "minHeimdallFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_minHeimdallFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "minHeimdallFee",
      "minHeimdallFee():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  prevBlockInterval(): BigInt {
    let result = super.call(
      "prevBlockInterval",
      "prevBlockInterval():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_prevBlockInterval(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "prevBlockInterval",
      "prevBlockInterval():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  proposerBonus(): BigInt {
    let result = super.call("proposerBonus", "proposerBonus():(uint256)", []);

    return result[0].toBigInt();
  }

  try_proposerBonus(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "proposerBonus",
      "proposerBonus():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  registry(): Address {
    let result = super.call("registry", "registry():(address)", []);

    return result[0].toAddress();
  }

  try_registry(): ethereum.CallResult<Address> {
    let result = super.tryCall("registry", "registry():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  replacementCoolDown(): BigInt {
    let result = super.call(
      "replacementCoolDown",
      "replacementCoolDown():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_replacementCoolDown(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "replacementCoolDown",
      "replacementCoolDown():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rewardDecreasePerCheckpoint(): BigInt {
    let result = super.call(
      "rewardDecreasePerCheckpoint",
      "rewardDecreasePerCheckpoint():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_rewardDecreasePerCheckpoint(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "rewardDecreasePerCheckpoint",
      "rewardDecreasePerCheckpoint():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rewardPerStake(): BigInt {
    let result = super.call("rewardPerStake", "rewardPerStake():(uint256)", []);

    return result[0].toBigInt();
  }

  try_rewardPerStake(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "rewardPerStake",
      "rewardPerStake():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rootChain(): Address {
    let result = super.call("rootChain", "rootChain():(address)", []);

    return result[0].toAddress();
  }

  try_rootChain(): ethereum.CallResult<Address> {
    let result = super.tryCall("rootChain", "rootChain():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  signerToValidator(param0: Address): BigInt {
    let result = super.call(
      "signerToValidator",
      "signerToValidator(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_signerToValidator(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "signerToValidator",
      "signerToValidator(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  signerUpdateLimit(): BigInt {
    let result = super.call(
      "signerUpdateLimit",
      "signerUpdateLimit():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_signerUpdateLimit(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "signerUpdateLimit",
      "signerUpdateLimit():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  signers(param0: BigInt): Address {
    let result = super.call("signers", "signers(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_signers(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("signers", "signers(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  slash(_slashingInfoList: Bytes): BigInt {
    let result = super.call("slash", "slash(bytes):(uint256)", [
      ethereum.Value.fromBytes(_slashingInfoList)
    ]);

    return result[0].toBigInt();
  }

  try_slash(_slashingInfoList: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall("slash", "slash(bytes):(uint256)", [
      ethereum.Value.fromBytes(_slashingInfoList)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  token(): Address {
    let result = super.call("token", "token():(address)", []);

    return result[0].toAddress();
  }

  try_token(): ethereum.CallResult<Address> {
    let result = super.tryCall("token", "token():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  totalHeimdallFee(): BigInt {
    let result = super.call(
      "totalHeimdallFee",
      "totalHeimdallFee():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalHeimdallFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalHeimdallFee",
      "totalHeimdallFee():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalRewards(): BigInt {
    let result = super.call("totalRewards", "totalRewards():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalRewards(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalRewards", "totalRewards():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalRewardsLiquidated(): BigInt {
    let result = super.call(
      "totalRewardsLiquidated",
      "totalRewardsLiquidated():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalRewardsLiquidated(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalRewardsLiquidated",
      "totalRewardsLiquidated():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalStaked(): BigInt {
    let result = super.call("totalStaked", "totalStaked():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalStaked(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalStaked", "totalStaked():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalStakedFor(user: Address): BigInt {
    let result = super.call(
      "totalStakedFor",
      "totalStakedFor(address):(uint256)",
      [ethereum.Value.fromAddress(user)]
    );

    return result[0].toBigInt();
  }

  try_totalStakedFor(user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalStakedFor",
      "totalStakedFor(address):(uint256)",
      [ethereum.Value.fromAddress(user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transferFunds(
    validatorId: BigInt,
    amount: BigInt,
    delegator: Address
  ): boolean {
    let result = super.call(
      "transferFunds",
      "transferFunds(uint256,uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(validatorId),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromAddress(delegator)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFunds(
    validatorId: BigInt,
    amount: BigInt,
    delegator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFunds",
      "transferFunds(uint256,uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(validatorId),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromAddress(delegator)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  userFeeExit(param0: Address): BigInt {
    let result = super.call("userFeeExit", "userFeeExit(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_userFeeExit(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "userFeeExit",
      "userFeeExit(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  validatorAuction(param0: BigInt): StakeManager__validatorAuctionResult {
    let result = super.call(
      "validatorAuction",
      "validatorAuction(uint256):(uint256,uint256,address,bool,bytes)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new StakeManager__validatorAuctionResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toAddress(),
      result[3].toBoolean(),
      result[4].toBytes()
    );
  }

  try_validatorAuction(
    param0: BigInt
  ): ethereum.CallResult<StakeManager__validatorAuctionResult> {
    let result = super.tryCall(
      "validatorAuction",
      "validatorAuction(uint256):(uint256,uint256,address,bool,bytes)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new StakeManager__validatorAuctionResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toAddress(),
        value[3].toBoolean(),
        value[4].toBytes()
      )
    );
  }

  validatorReward(validatorId: BigInt): BigInt {
    let result = super.call(
      "validatorReward",
      "validatorReward(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(validatorId)]
    );

    return result[0].toBigInt();
  }

  try_validatorReward(validatorId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "validatorReward",
      "validatorReward(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(validatorId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  validatorShareFactory(): Address {
    let result = super.call(
      "validatorShareFactory",
      "validatorShareFactory():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_validatorShareFactory(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "validatorShareFactory",
      "validatorShareFactory():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  validatorStake(validatorId: BigInt): BigInt {
    let result = super.call(
      "validatorStake",
      "validatorStake(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(validatorId)]
    );

    return result[0].toBigInt();
  }

  try_validatorStake(validatorId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "validatorStake",
      "validatorStake(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(validatorId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  validatorState(): StakeManager__validatorStateResult {
    let result = super.call(
      "validatorState",
      "validatorState():(uint256,uint256)",
      []
    );

    return new StakeManager__validatorStateResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_validatorState(): ethereum.CallResult<
    StakeManager__validatorStateResult
  > {
    let result = super.tryCall(
      "validatorState",
      "validatorState():(uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new StakeManager__validatorStateResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  validatorStateChanges(
    param0: BigInt
  ): StakeManager__validatorStateChangesResult {
    let result = super.call(
      "validatorStateChanges",
      "validatorStateChanges(uint256):(int256,int256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new StakeManager__validatorStateChangesResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_validatorStateChanges(
    param0: BigInt
  ): ethereum.CallResult<StakeManager__validatorStateChangesResult> {
    let result = super.tryCall(
      "validatorStateChanges",
      "validatorStateChanges(uint256):(int256,int256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new StakeManager__validatorStateChangesResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  validatorThreshold(): BigInt {
    let result = super.call(
      "validatorThreshold",
      "validatorThreshold():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_validatorThreshold(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "validatorThreshold",
      "validatorThreshold():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  validators(param0: BigInt): StakeManager__validatorsResult {
    let result = super.call(
      "validators",
      "validators(uint256):(uint256,uint256,uint256,uint256,uint256,address,address,uint8,uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new StakeManager__validatorsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toAddress(),
      result[6].toAddress(),
      result[7].toI32(),
      result[8].toBigInt(),
      result[9].toBigInt(),
      result[10].toBigInt(),
      result[11].toBigInt(),
      result[12].toBigInt()
    );
  }

  try_validators(
    param0: BigInt
  ): ethereum.CallResult<StakeManager__validatorsResult> {
    let result = super.tryCall(
      "validators",
      "validators(uint256):(uint256,uint256,uint256,uint256,uint256,address,address,uint8,uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new StakeManager__validatorsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toAddress(),
        value[6].toAddress(),
        value[7].toI32(),
        value[8].toBigInt(),
        value[9].toBigInt(),
        value[10].toBigInt(),
        value[11].toBigInt(),
        value[12].toBigInt()
      )
    );
  }

  withdrawDelegatorsReward(validatorId: BigInt): BigInt {
    let result = super.call(
      "withdrawDelegatorsReward",
      "withdrawDelegatorsReward(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(validatorId)]
    );

    return result[0].toBigInt();
  }

  try_withdrawDelegatorsReward(
    validatorId: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "withdrawDelegatorsReward",
      "withdrawDelegatorsReward(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(validatorId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  withdrawalDelay(): BigInt {
    let result = super.call(
      "withdrawalDelay",
      "withdrawalDelay():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_withdrawalDelay(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "withdrawalDelay",
      "withdrawalDelay():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ChangeRootChainCall extends ethereum.Call {
  get inputs(): ChangeRootChainCall__Inputs {
    return new ChangeRootChainCall__Inputs(this);
  }

  get outputs(): ChangeRootChainCall__Outputs {
    return new ChangeRootChainCall__Outputs(this);
  }
}

export class ChangeRootChainCall__Inputs {
  _call: ChangeRootChainCall;

  constructor(call: ChangeRootChainCall) {
    this._call = call;
  }

  get newRootChain(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ChangeRootChainCall__Outputs {
  _call: ChangeRootChainCall;

  constructor(call: ChangeRootChainCall) {
    this._call = call;
  }
}

export class CheckSignaturesCall extends ethereum.Call {
  get inputs(): CheckSignaturesCall__Inputs {
    return new CheckSignaturesCall__Inputs(this);
  }

  get outputs(): CheckSignaturesCall__Outputs {
    return new CheckSignaturesCall__Outputs(this);
  }
}

export class CheckSignaturesCall__Inputs {
  _call: CheckSignaturesCall;

  constructor(call: CheckSignaturesCall) {
    this._call = call;
  }

  get blockInterval(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get voteHash(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get stateRoot(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get proposer(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get sigs(): Array<Array<BigInt>> {
    return this._call.inputValues[4].value.toBigIntMatrix();
  }
}

export class CheckSignaturesCall__Outputs {
  _call: CheckSignaturesCall;

  constructor(call: CheckSignaturesCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ClaimFeeCall extends ethereum.Call {
  get inputs(): ClaimFeeCall__Inputs {
    return new ClaimFeeCall__Inputs(this);
  }

  get outputs(): ClaimFeeCall__Outputs {
    return new ClaimFeeCall__Outputs(this);
  }
}

export class ClaimFeeCall__Inputs {
  _call: ClaimFeeCall;

  constructor(call: ClaimFeeCall) {
    this._call = call;
  }

  get accumFeeAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get index(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get proof(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class ClaimFeeCall__Outputs {
  _call: ClaimFeeCall;

  constructor(call: ClaimFeeCall) {
    this._call = call;
  }
}

export class ConfirmAuctionBidCall extends ethereum.Call {
  get inputs(): ConfirmAuctionBidCall__Inputs {
    return new ConfirmAuctionBidCall__Inputs(this);
  }

  get outputs(): ConfirmAuctionBidCall__Outputs {
    return new ConfirmAuctionBidCall__Outputs(this);
  }
}

export class ConfirmAuctionBidCall__Inputs {
  _call: ConfirmAuctionBidCall;

  constructor(call: ConfirmAuctionBidCall) {
    this._call = call;
  }

  get validatorId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get heimdallFee(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ConfirmAuctionBidCall__Outputs {
  _call: ConfirmAuctionBidCall;

  constructor(call: ConfirmAuctionBidCall) {
    this._call = call;
  }
}

export class DecreaseValidatorDelegatedAmountCall extends ethereum.Call {
  get inputs(): DecreaseValidatorDelegatedAmountCall__Inputs {
    return new DecreaseValidatorDelegatedAmountCall__Inputs(this);
  }

  get outputs(): DecreaseValidatorDelegatedAmountCall__Outputs {
    return new DecreaseValidatorDelegatedAmountCall__Outputs(this);
  }
}

export class DecreaseValidatorDelegatedAmountCall__Inputs {
  _call: DecreaseValidatorDelegatedAmountCall;

  constructor(call: DecreaseValidatorDelegatedAmountCall) {
    this._call = call;
  }

  get validatorId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DecreaseValidatorDelegatedAmountCall__Outputs {
  _call: DecreaseValidatorDelegatedAmountCall;

  constructor(call: DecreaseValidatorDelegatedAmountCall) {
    this._call = call;
  }
}

export class DelegationDepositCall extends ethereum.Call {
  get inputs(): DelegationDepositCall__Inputs {
    return new DelegationDepositCall__Inputs(this);
  }

  get outputs(): DelegationDepositCall__Outputs {
    return new DelegationDepositCall__Outputs(this);
  }
}

export class DelegationDepositCall__Inputs {
  _call: DelegationDepositCall;

  constructor(call: DelegationDepositCall) {
    this._call = call;
  }

  get validatorId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get delegator(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class DelegationDepositCall__Outputs {
  _call: DelegationDepositCall;

  constructor(call: DelegationDepositCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class DethroneAndStakeCall extends ethereum.Call {
  get inputs(): DethroneAndStakeCall__Inputs {
    return new DethroneAndStakeCall__Inputs(this);
  }

  get outputs(): DethroneAndStakeCall__Outputs {
    return new DethroneAndStakeCall__Outputs(this);
  }
}

export class DethroneAndStakeCall__Inputs {
  _call: DethroneAndStakeCall;

  constructor(call: DethroneAndStakeCall) {
    this._call = call;
  }

  get auctionUser(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get heimdallFee(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get validatorId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get auctionAmount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get acceptDelegation(): boolean {
    return this._call.inputValues[4].value.toBoolean();
  }

  get signerPubkey(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }
}

export class DethroneAndStakeCall__Outputs {
  _call: DethroneAndStakeCall;

  constructor(call: DethroneAndStakeCall) {
    this._call = call;
  }
}

export class DrainCall extends ethereum.Call {
  get inputs(): DrainCall__Inputs {
    return new DrainCall__Inputs(this);
  }

  get outputs(): DrainCall__Outputs {
    return new DrainCall__Outputs(this);
  }
}

export class DrainCall__Inputs {
  _call: DrainCall;

  constructor(call: DrainCall) {
    this._call = call;
  }

  get destination(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DrainCall__Outputs {
  _call: DrainCall;

  constructor(call: DrainCall) {
    this._call = call;
  }
}

export class DrainValidatorSharesCall extends ethereum.Call {
  get inputs(): DrainValidatorSharesCall__Inputs {
    return new DrainValidatorSharesCall__Inputs(this);
  }

  get outputs(): DrainValidatorSharesCall__Outputs {
    return new DrainValidatorSharesCall__Outputs(this);
  }
}

export class DrainValidatorSharesCall__Inputs {
  _call: DrainValidatorSharesCall;

  constructor(call: DrainValidatorSharesCall) {
    this._call = call;
  }

  get validatorId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get tokenAddr(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get destination(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class DrainValidatorSharesCall__Outputs {
  _call: DrainValidatorSharesCall;

  constructor(call: DrainValidatorSharesCall) {
    this._call = call;
  }
}

export class ForceUnstakeCall extends ethereum.Call {
  get inputs(): ForceUnstakeCall__Inputs {
    return new ForceUnstakeCall__Inputs(this);
  }

  get outputs(): ForceUnstakeCall__Outputs {
    return new ForceUnstakeCall__Outputs(this);
  }
}

export class ForceUnstakeCall__Inputs {
  _call: ForceUnstakeCall;

  constructor(call: ForceUnstakeCall) {
    this._call = call;
  }

  get validatorId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ForceUnstakeCall__Outputs {
  _call: ForceUnstakeCall;

  constructor(call: ForceUnstakeCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _registry(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _rootchain(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _token(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _NFTContract(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _stakingLogger(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get _validatorShareFactory(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get _governance(): Address {
    return this._call.inputValues[6].value.toAddress();
  }

  get _owner(): Address {
    return this._call.inputValues[7].value.toAddress();
  }

  get _extensionCode(): Address {
    return this._call.inputValues[8].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class InsertSignersCall extends ethereum.Call {
  get inputs(): InsertSignersCall__Inputs {
    return new InsertSignersCall__Inputs(this);
  }

  get outputs(): InsertSignersCall__Outputs {
    return new InsertSignersCall__Outputs(this);
  }
}

export class InsertSignersCall__Inputs {
  _call: InsertSignersCall;

  constructor(call: InsertSignersCall) {
    this._call = call;
  }

  get _signers(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class InsertSignersCall__Outputs {
  _call: InsertSignersCall;

  constructor(call: InsertSignersCall) {
    this._call = call;
  }
}

export class LockCall extends ethereum.Call {
  get inputs(): LockCall__Inputs {
    return new LockCall__Inputs(this);
  }

  get outputs(): LockCall__Outputs {
    return new LockCall__Outputs(this);
  }
}

export class LockCall__Inputs {
  _call: LockCall;

  constructor(call: LockCall) {
    this._call = call;
  }
}

export class LockCall__Outputs {
  _call: LockCall;

  constructor(call: LockCall) {
    this._call = call;
  }
}

export class MigrateDelegationCall extends ethereum.Call {
  get inputs(): MigrateDelegationCall__Inputs {
    return new MigrateDelegationCall__Inputs(this);
  }

  get outputs(): MigrateDelegationCall__Outputs {
    return new MigrateDelegationCall__Outputs(this);
  }
}

export class MigrateDelegationCall__Inputs {
  _call: MigrateDelegationCall;

  constructor(call: MigrateDelegationCall) {
    this._call = call;
  }

  get fromValidatorId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get toValidatorId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class MigrateDelegationCall__Outputs {
  _call: MigrateDelegationCall;

  constructor(call: MigrateDelegationCall) {
    this._call = call;
  }
}

export class MigrateValidatorsDataCall extends ethereum.Call {
  get inputs(): MigrateValidatorsDataCall__Inputs {
    return new MigrateValidatorsDataCall__Inputs(this);
  }

  get outputs(): MigrateValidatorsDataCall__Outputs {
    return new MigrateValidatorsDataCall__Outputs(this);
  }
}

export class MigrateValidatorsDataCall__Inputs {
  _call: MigrateValidatorsDataCall;

  constructor(call: MigrateValidatorsDataCall) {
    this._call = call;
  }

  get validatorIdFrom(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get validatorIdTo(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class MigrateValidatorsDataCall__Outputs {
  _call: MigrateValidatorsDataCall;

  constructor(call: MigrateValidatorsDataCall) {
    this._call = call;
  }
}

export class ReinitializeCall extends ethereum.Call {
  get inputs(): ReinitializeCall__Inputs {
    return new ReinitializeCall__Inputs(this);
  }

  get outputs(): ReinitializeCall__Outputs {
    return new ReinitializeCall__Outputs(this);
  }
}

export class ReinitializeCall__Inputs {
  _call: ReinitializeCall;

  constructor(call: ReinitializeCall) {
    this._call = call;
  }

  get _NFTContract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _stakingLogger(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _validatorShareFactory(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _extensionCode(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class ReinitializeCall__Outputs {
  _call: ReinitializeCall;

  constructor(call: ReinitializeCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RestakeCall extends ethereum.Call {
  get inputs(): RestakeCall__Inputs {
    return new RestakeCall__Inputs(this);
  }

  get outputs(): RestakeCall__Outputs {
    return new RestakeCall__Outputs(this);
  }
}

export class RestakeCall__Inputs {
  _call: RestakeCall;

  constructor(call: RestakeCall) {
    this._call = call;
  }

  get validatorId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get stakeRewards(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class RestakeCall__Outputs {
  _call: RestakeCall;

  constructor(call: RestakeCall) {
    this._call = call;
  }
}

export class SetCurrentEpochCall extends ethereum.Call {
  get inputs(): SetCurrentEpochCall__Inputs {
    return new SetCurrentEpochCall__Inputs(this);
  }

  get outputs(): SetCurrentEpochCall__Outputs {
    return new SetCurrentEpochCall__Outputs(this);
  }
}

export class SetCurrentEpochCall__Inputs {
  _call: SetCurrentEpochCall;

  constructor(call: SetCurrentEpochCall) {
    this._call = call;
  }

  get _currentEpoch(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetCurrentEpochCall__Outputs {
  _call: SetCurrentEpochCall;

  constructor(call: SetCurrentEpochCall) {
    this._call = call;
  }
}

export class SetDelegationEnabledCall extends ethereum.Call {
  get inputs(): SetDelegationEnabledCall__Inputs {
    return new SetDelegationEnabledCall__Inputs(this);
  }

  get outputs(): SetDelegationEnabledCall__Outputs {
    return new SetDelegationEnabledCall__Outputs(this);
  }
}

export class SetDelegationEnabledCall__Inputs {
  _call: SetDelegationEnabledCall;

  constructor(call: SetDelegationEnabledCall) {
    this._call = call;
  }

  get enabled(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetDelegationEnabledCall__Outputs {
  _call: SetDelegationEnabledCall;

  constructor(call: SetDelegationEnabledCall) {
    this._call = call;
  }
}

export class SetStakingTokenCall extends ethereum.Call {
  get inputs(): SetStakingTokenCall__Inputs {
    return new SetStakingTokenCall__Inputs(this);
  }

  get outputs(): SetStakingTokenCall__Outputs {
    return new SetStakingTokenCall__Outputs(this);
  }
}

export class SetStakingTokenCall__Inputs {
  _call: SetStakingTokenCall;

  constructor(call: SetStakingTokenCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetStakingTokenCall__Outputs {
  _call: SetStakingTokenCall;

  constructor(call: SetStakingTokenCall) {
    this._call = call;
  }
}

export class SlashCall extends ethereum.Call {
  get inputs(): SlashCall__Inputs {
    return new SlashCall__Inputs(this);
  }

  get outputs(): SlashCall__Outputs {
    return new SlashCall__Outputs(this);
  }
}

export class SlashCall__Inputs {
  _call: SlashCall;

  constructor(call: SlashCall) {
    this._call = call;
  }

  get _slashingInfoList(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class SlashCall__Outputs {
  _call: SlashCall;

  constructor(call: SlashCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class StakeForCall extends ethereum.Call {
  get inputs(): StakeForCall__Inputs {
    return new StakeForCall__Inputs(this);
  }

  get outputs(): StakeForCall__Outputs {
    return new StakeForCall__Outputs(this);
  }
}

export class StakeForCall__Inputs {
  _call: StakeForCall;

  constructor(call: StakeForCall) {
    this._call = call;
  }

  get user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get heimdallFee(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get acceptDelegation(): boolean {
    return this._call.inputValues[3].value.toBoolean();
  }

  get signerPubkey(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class StakeForCall__Outputs {
  _call: StakeForCall;

  constructor(call: StakeForCall) {
    this._call = call;
  }
}

export class StartAuctionCall extends ethereum.Call {
  get inputs(): StartAuctionCall__Inputs {
    return new StartAuctionCall__Inputs(this);
  }

  get outputs(): StartAuctionCall__Outputs {
    return new StartAuctionCall__Outputs(this);
  }
}

export class StartAuctionCall__Inputs {
  _call: StartAuctionCall;

  constructor(call: StartAuctionCall) {
    this._call = call;
  }

  get validatorId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _acceptDelegation(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }

  get _signerPubkey(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class StartAuctionCall__Outputs {
  _call: StartAuctionCall;

  constructor(call: StartAuctionCall) {
    this._call = call;
  }
}

export class StopAuctionsCall extends ethereum.Call {
  get inputs(): StopAuctionsCall__Inputs {
    return new StopAuctionsCall__Inputs(this);
  }

  get outputs(): StopAuctionsCall__Outputs {
    return new StopAuctionsCall__Outputs(this);
  }
}

export class StopAuctionsCall__Inputs {
  _call: StopAuctionsCall;

  constructor(call: StopAuctionsCall) {
    this._call = call;
  }

  get forNCheckpoints(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class StopAuctionsCall__Outputs {
  _call: StopAuctionsCall;

  constructor(call: StopAuctionsCall) {
    this._call = call;
  }
}

export class TopUpForFeeCall extends ethereum.Call {
  get inputs(): TopUpForFeeCall__Inputs {
    return new TopUpForFeeCall__Inputs(this);
  }

  get outputs(): TopUpForFeeCall__Outputs {
    return new TopUpForFeeCall__Outputs(this);
  }
}

export class TopUpForFeeCall__Inputs {
  _call: TopUpForFeeCall;

  constructor(call: TopUpForFeeCall) {
    this._call = call;
  }

  get user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get heimdallFee(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TopUpForFeeCall__Outputs {
  _call: TopUpForFeeCall;

  constructor(call: TopUpForFeeCall) {
    this._call = call;
  }
}

export class TransferFundsCall extends ethereum.Call {
  get inputs(): TransferFundsCall__Inputs {
    return new TransferFundsCall__Inputs(this);
  }

  get outputs(): TransferFundsCall__Outputs {
    return new TransferFundsCall__Outputs(this);
  }
}

export class TransferFundsCall__Inputs {
  _call: TransferFundsCall;

  constructor(call: TransferFundsCall) {
    this._call = call;
  }

  get validatorId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get delegator(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class TransferFundsCall__Outputs {
  _call: TransferFundsCall;

  constructor(call: TransferFundsCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UnjailCall extends ethereum.Call {
  get inputs(): UnjailCall__Inputs {
    return new UnjailCall__Inputs(this);
  }

  get outputs(): UnjailCall__Outputs {
    return new UnjailCall__Outputs(this);
  }
}

export class UnjailCall__Inputs {
  _call: UnjailCall;

  constructor(call: UnjailCall) {
    this._call = call;
  }

  get validatorId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UnjailCall__Outputs {
  _call: UnjailCall;

  constructor(call: UnjailCall) {
    this._call = call;
  }
}

export class UnlockCall extends ethereum.Call {
  get inputs(): UnlockCall__Inputs {
    return new UnlockCall__Inputs(this);
  }

  get outputs(): UnlockCall__Outputs {
    return new UnlockCall__Outputs(this);
  }
}

export class UnlockCall__Inputs {
  _call: UnlockCall;

  constructor(call: UnlockCall) {
    this._call = call;
  }
}

export class UnlockCall__Outputs {
  _call: UnlockCall;

  constructor(call: UnlockCall) {
    this._call = call;
  }
}

export class UnstakeCall extends ethereum.Call {
  get inputs(): UnstakeCall__Inputs {
    return new UnstakeCall__Inputs(this);
  }

  get outputs(): UnstakeCall__Outputs {
    return new UnstakeCall__Outputs(this);
  }
}

export class UnstakeCall__Inputs {
  _call: UnstakeCall;

  constructor(call: UnstakeCall) {
    this._call = call;
  }

  get validatorId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UnstakeCall__Outputs {
  _call: UnstakeCall;

  constructor(call: UnstakeCall) {
    this._call = call;
  }
}

export class UnstakeClaimCall extends ethereum.Call {
  get inputs(): UnstakeClaimCall__Inputs {
    return new UnstakeClaimCall__Inputs(this);
  }

  get outputs(): UnstakeClaimCall__Outputs {
    return new UnstakeClaimCall__Outputs(this);
  }
}

export class UnstakeClaimCall__Inputs {
  _call: UnstakeClaimCall;

  constructor(call: UnstakeClaimCall) {
    this._call = call;
  }

  get validatorId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UnstakeClaimCall__Outputs {
  _call: UnstakeClaimCall;

  constructor(call: UnstakeClaimCall) {
    this._call = call;
  }
}

export class UpdateCheckPointBlockIntervalCall extends ethereum.Call {
  get inputs(): UpdateCheckPointBlockIntervalCall__Inputs {
    return new UpdateCheckPointBlockIntervalCall__Inputs(this);
  }

  get outputs(): UpdateCheckPointBlockIntervalCall__Outputs {
    return new UpdateCheckPointBlockIntervalCall__Outputs(this);
  }
}

export class UpdateCheckPointBlockIntervalCall__Inputs {
  _call: UpdateCheckPointBlockIntervalCall;

  constructor(call: UpdateCheckPointBlockIntervalCall) {
    this._call = call;
  }

  get _blocks(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateCheckPointBlockIntervalCall__Outputs {
  _call: UpdateCheckPointBlockIntervalCall;

  constructor(call: UpdateCheckPointBlockIntervalCall) {
    this._call = call;
  }
}

export class UpdateCheckpointRewardCall extends ethereum.Call {
  get inputs(): UpdateCheckpointRewardCall__Inputs {
    return new UpdateCheckpointRewardCall__Inputs(this);
  }

  get outputs(): UpdateCheckpointRewardCall__Outputs {
    return new UpdateCheckpointRewardCall__Outputs(this);
  }
}

export class UpdateCheckpointRewardCall__Inputs {
  _call: UpdateCheckpointRewardCall;

  constructor(call: UpdateCheckpointRewardCall) {
    this._call = call;
  }

  get newReward(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateCheckpointRewardCall__Outputs {
  _call: UpdateCheckpointRewardCall;

  constructor(call: UpdateCheckpointRewardCall) {
    this._call = call;
  }
}

export class UpdateCheckpointRewardParamsCall extends ethereum.Call {
  get inputs(): UpdateCheckpointRewardParamsCall__Inputs {
    return new UpdateCheckpointRewardParamsCall__Inputs(this);
  }

  get outputs(): UpdateCheckpointRewardParamsCall__Outputs {
    return new UpdateCheckpointRewardParamsCall__Outputs(this);
  }
}

export class UpdateCheckpointRewardParamsCall__Inputs {
  _call: UpdateCheckpointRewardParamsCall;

  constructor(call: UpdateCheckpointRewardParamsCall) {
    this._call = call;
  }

  get _rewardDecreasePerCheckpoint(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _maxRewardedCheckpoints(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _checkpointRewardDelta(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class UpdateCheckpointRewardParamsCall__Outputs {
  _call: UpdateCheckpointRewardParamsCall;

  constructor(call: UpdateCheckpointRewardParamsCall) {
    this._call = call;
  }
}

export class UpdateCommissionRateCall extends ethereum.Call {
  get inputs(): UpdateCommissionRateCall__Inputs {
    return new UpdateCommissionRateCall__Inputs(this);
  }

  get outputs(): UpdateCommissionRateCall__Outputs {
    return new UpdateCommissionRateCall__Outputs(this);
  }
}

export class UpdateCommissionRateCall__Inputs {
  _call: UpdateCommissionRateCall;

  constructor(call: UpdateCommissionRateCall) {
    this._call = call;
  }

  get validatorId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get newCommissionRate(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class UpdateCommissionRateCall__Outputs {
  _call: UpdateCommissionRateCall;

  constructor(call: UpdateCommissionRateCall) {
    this._call = call;
  }
}

export class UpdateDynastyValueCall extends ethereum.Call {
  get inputs(): UpdateDynastyValueCall__Inputs {
    return new UpdateDynastyValueCall__Inputs(this);
  }

  get outputs(): UpdateDynastyValueCall__Outputs {
    return new UpdateDynastyValueCall__Outputs(this);
  }
}

export class UpdateDynastyValueCall__Inputs {
  _call: UpdateDynastyValueCall;

  constructor(call: UpdateDynastyValueCall) {
    this._call = call;
  }

  get newDynasty(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateDynastyValueCall__Outputs {
  _call: UpdateDynastyValueCall;

  constructor(call: UpdateDynastyValueCall) {
    this._call = call;
  }
}

export class UpdateMinAmountsCall extends ethereum.Call {
  get inputs(): UpdateMinAmountsCall__Inputs {
    return new UpdateMinAmountsCall__Inputs(this);
  }

  get outputs(): UpdateMinAmountsCall__Outputs {
    return new UpdateMinAmountsCall__Outputs(this);
  }
}

export class UpdateMinAmountsCall__Inputs {
  _call: UpdateMinAmountsCall;

  constructor(call: UpdateMinAmountsCall) {
    this._call = call;
  }

  get _minDeposit(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _minHeimdallFee(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class UpdateMinAmountsCall__Outputs {
  _call: UpdateMinAmountsCall;

  constructor(call: UpdateMinAmountsCall) {
    this._call = call;
  }
}

export class UpdateProposerBonusCall extends ethereum.Call {
  get inputs(): UpdateProposerBonusCall__Inputs {
    return new UpdateProposerBonusCall__Inputs(this);
  }

  get outputs(): UpdateProposerBonusCall__Outputs {
    return new UpdateProposerBonusCall__Outputs(this);
  }
}

export class UpdateProposerBonusCall__Inputs {
  _call: UpdateProposerBonusCall;

  constructor(call: UpdateProposerBonusCall) {
    this._call = call;
  }

  get newProposerBonus(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateProposerBonusCall__Outputs {
  _call: UpdateProposerBonusCall;

  constructor(call: UpdateProposerBonusCall) {
    this._call = call;
  }
}

export class UpdateSignerCall extends ethereum.Call {
  get inputs(): UpdateSignerCall__Inputs {
    return new UpdateSignerCall__Inputs(this);
  }

  get outputs(): UpdateSignerCall__Outputs {
    return new UpdateSignerCall__Outputs(this);
  }
}

export class UpdateSignerCall__Inputs {
  _call: UpdateSignerCall;

  constructor(call: UpdateSignerCall) {
    this._call = call;
  }

  get validatorId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get signerPubkey(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class UpdateSignerCall__Outputs {
  _call: UpdateSignerCall;

  constructor(call: UpdateSignerCall) {
    this._call = call;
  }
}

export class UpdateSignerUpdateLimitCall extends ethereum.Call {
  get inputs(): UpdateSignerUpdateLimitCall__Inputs {
    return new UpdateSignerUpdateLimitCall__Inputs(this);
  }

  get outputs(): UpdateSignerUpdateLimitCall__Outputs {
    return new UpdateSignerUpdateLimitCall__Outputs(this);
  }
}

export class UpdateSignerUpdateLimitCall__Inputs {
  _call: UpdateSignerUpdateLimitCall;

  constructor(call: UpdateSignerUpdateLimitCall) {
    this._call = call;
  }

  get _limit(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateSignerUpdateLimitCall__Outputs {
  _call: UpdateSignerUpdateLimitCall;

  constructor(call: UpdateSignerUpdateLimitCall) {
    this._call = call;
  }
}

export class UpdateValidatorContractAddressCall extends ethereum.Call {
  get inputs(): UpdateValidatorContractAddressCall__Inputs {
    return new UpdateValidatorContractAddressCall__Inputs(this);
  }

  get outputs(): UpdateValidatorContractAddressCall__Outputs {
    return new UpdateValidatorContractAddressCall__Outputs(this);
  }
}

export class UpdateValidatorContractAddressCall__Inputs {
  _call: UpdateValidatorContractAddressCall;

  constructor(call: UpdateValidatorContractAddressCall) {
    this._call = call;
  }

  get validatorId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get newContractAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class UpdateValidatorContractAddressCall__Outputs {
  _call: UpdateValidatorContractAddressCall;

  constructor(call: UpdateValidatorContractAddressCall) {
    this._call = call;
  }
}

export class UpdateValidatorDelegationCall extends ethereum.Call {
  get inputs(): UpdateValidatorDelegationCall__Inputs {
    return new UpdateValidatorDelegationCall__Inputs(this);
  }

  get outputs(): UpdateValidatorDelegationCall__Outputs {
    return new UpdateValidatorDelegationCall__Outputs(this);
  }
}

export class UpdateValidatorDelegationCall__Inputs {
  _call: UpdateValidatorDelegationCall;

  constructor(call: UpdateValidatorDelegationCall) {
    this._call = call;
  }

  get delegation(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class UpdateValidatorDelegationCall__Outputs {
  _call: UpdateValidatorDelegationCall;

  constructor(call: UpdateValidatorDelegationCall) {
    this._call = call;
  }
}

export class UpdateValidatorStateCall extends ethereum.Call {
  get inputs(): UpdateValidatorStateCall__Inputs {
    return new UpdateValidatorStateCall__Inputs(this);
  }

  get outputs(): UpdateValidatorStateCall__Outputs {
    return new UpdateValidatorStateCall__Outputs(this);
  }
}

export class UpdateValidatorStateCall__Inputs {
  _call: UpdateValidatorStateCall;

  constructor(call: UpdateValidatorStateCall) {
    this._call = call;
  }

  get validatorId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class UpdateValidatorStateCall__Outputs {
  _call: UpdateValidatorStateCall;

  constructor(call: UpdateValidatorStateCall) {
    this._call = call;
  }
}

export class UpdateValidatorThresholdCall extends ethereum.Call {
  get inputs(): UpdateValidatorThresholdCall__Inputs {
    return new UpdateValidatorThresholdCall__Inputs(this);
  }

  get outputs(): UpdateValidatorThresholdCall__Outputs {
    return new UpdateValidatorThresholdCall__Outputs(this);
  }
}

export class UpdateValidatorThresholdCall__Inputs {
  _call: UpdateValidatorThresholdCall;

  constructor(call: UpdateValidatorThresholdCall) {
    this._call = call;
  }

  get newThreshold(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateValidatorThresholdCall__Outputs {
  _call: UpdateValidatorThresholdCall;

  constructor(call: UpdateValidatorThresholdCall) {
    this._call = call;
  }
}

export class WithdrawDelegatorsRewardCall extends ethereum.Call {
  get inputs(): WithdrawDelegatorsRewardCall__Inputs {
    return new WithdrawDelegatorsRewardCall__Inputs(this);
  }

  get outputs(): WithdrawDelegatorsRewardCall__Outputs {
    return new WithdrawDelegatorsRewardCall__Outputs(this);
  }
}

export class WithdrawDelegatorsRewardCall__Inputs {
  _call: WithdrawDelegatorsRewardCall;

  constructor(call: WithdrawDelegatorsRewardCall) {
    this._call = call;
  }

  get validatorId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawDelegatorsRewardCall__Outputs {
  _call: WithdrawDelegatorsRewardCall;

  constructor(call: WithdrawDelegatorsRewardCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class WithdrawRewardsCall extends ethereum.Call {
  get inputs(): WithdrawRewardsCall__Inputs {
    return new WithdrawRewardsCall__Inputs(this);
  }

  get outputs(): WithdrawRewardsCall__Outputs {
    return new WithdrawRewardsCall__Outputs(this);
  }
}

export class WithdrawRewardsCall__Inputs {
  _call: WithdrawRewardsCall;

  constructor(call: WithdrawRewardsCall) {
    this._call = call;
  }

  get validatorId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawRewardsCall__Outputs {
  _call: WithdrawRewardsCall;

  constructor(call: WithdrawRewardsCall) {
    this._call = call;
  }
}
