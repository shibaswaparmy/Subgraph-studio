// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class MaxErc20DepositUpdate extends ethereum.Event {
  get params(): MaxErc20DepositUpdate__Params {
    return new MaxErc20DepositUpdate__Params(this);
  }
}

export class MaxErc20DepositUpdate__Params {
  _event: MaxErc20DepositUpdate;

  constructor(event: MaxErc20DepositUpdate) {
    this._event = event;
  }

  get oldLimit(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newLimit(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class NewDepositBlock extends ethereum.Event {
  get params(): NewDepositBlock__Params {
    return new NewDepositBlock__Params(this);
  }
}

export class NewDepositBlock__Params {
  _event: NewDepositBlock;

  constructor(event: NewDepositBlock) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amountOrNFTId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get depositBlockId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class DepositManagerOwnershipTransferred extends ethereum.Event {
  get params(): DepositManagerOwnershipTransferred__Params {
    return new DepositManagerOwnershipTransferred__Params(this);
  }
}

export class DepositManagerOwnershipTransferred__Params {
  _event: DepositManagerOwnershipTransferred;

  constructor(event: DepositManagerOwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class DepositManager__depositsResult {
  value0: Bytes;
  value1: BigInt;

  constructor(value0: Bytes, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromFixedBytes(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getDepositHash(): Bytes {
    return this.value0;
  }

  getCreatedAt(): BigInt {
    return this.value1;
  }
}

export class DepositManager extends ethereum.SmartContract {
  static bind(address: Address): DepositManager {
    return new DepositManager("DepositManager", address);
  }

  childChain(): Address {
    let result = super.call("childChain", "childChain():(address)", []);

    return result[0].toAddress();
  }

  try_childChain(): ethereum.CallResult<Address> {
    let result = super.tryCall("childChain", "childChain():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  deposits(param0: BigInt): DepositManager__depositsResult {
    let result = super.call("deposits", "deposits(uint256):(bytes32,uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return new DepositManager__depositsResult(
      result[0].toBytes(),
      result[1].toBigInt()
    );
  }

  try_deposits(
    param0: BigInt
  ): ethereum.CallResult<DepositManager__depositsResult> {
    let result = super.tryCall(
      "deposits",
      "deposits(uint256):(bytes32,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DepositManager__depositsResult(
        value[0].toBytes(),
        value[1].toBigInt()
      )
    );
  }

  governance(): Address {
    let result = super.call("governance", "governance():(address)", []);

    return result[0].toAddress();
  }

  try_governance(): ethereum.CallResult<Address> {
    let result = super.tryCall("governance", "governance():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isOwner(): boolean {
    let result = super.call("isOwner", "isOwner():(bool)", []);

    return result[0].toBoolean();
  }

  try_isOwner(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isOwner", "isOwner():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  locked(): boolean {
    let result = super.call("locked", "locked():(bool)", []);

    return result[0].toBoolean();
  }

  try_locked(): ethereum.CallResult<boolean> {
    let result = super.tryCall("locked", "locked():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  maxErc20Deposit(): BigInt {
    let result = super.call(
      "maxErc20Deposit",
      "maxErc20Deposit():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_maxErc20Deposit(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maxErc20Deposit",
      "maxErc20Deposit():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  onERC721Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: Bytes
  ): Bytes {
    let result = super.call(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromBytes(param3)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC721Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromBytes(param3)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  registry(): Address {
    let result = super.call("registry", "registry():(address)", []);

    return result[0].toAddress();
  }

  try_registry(): ethereum.CallResult<Address> {
    let result = super.tryCall("registry", "registry():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  rootChain(): Address {
    let result = super.call("rootChain", "rootChain():(address)", []);

    return result[0].toAddress();
  }

  try_rootChain(): ethereum.CallResult<Address> {
    let result = super.tryCall("rootChain", "rootChain():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  stateSender(): Address {
    let result = super.call("stateSender", "stateSender():(address)", []);

    return result[0].toAddress();
  }

  try_stateSender(): ethereum.CallResult<Address> {
    let result = super.tryCall("stateSender", "stateSender():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DefaultCall extends ethereum.Call {
  get inputs(): DefaultCall__Inputs {
    return new DefaultCall__Inputs(this);
  }

  get outputs(): DefaultCall__Outputs {
    return new DefaultCall__Outputs(this);
  }
}

export class DefaultCall__Inputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class DefaultCall__Outputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class DepositBulkCall extends ethereum.Call {
  get inputs(): DepositBulkCall__Inputs {
    return new DepositBulkCall__Inputs(this);
  }

  get outputs(): DepositBulkCall__Outputs {
    return new DepositBulkCall__Outputs(this);
  }
}

export class DepositBulkCall__Inputs {
  _call: DepositBulkCall;

  constructor(call: DepositBulkCall) {
    this._call = call;
  }

  get _tokens(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get _amountOrTokens(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get _user(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class DepositBulkCall__Outputs {
  _call: DepositBulkCall;

  constructor(call: DepositBulkCall) {
    this._call = call;
  }
}

export class DepositERC20Call extends ethereum.Call {
  get inputs(): DepositERC20Call__Inputs {
    return new DepositERC20Call__Inputs(this);
  }

  get outputs(): DepositERC20Call__Outputs {
    return new DepositERC20Call__Outputs(this);
  }
}

export class DepositERC20Call__Inputs {
  _call: DepositERC20Call;

  constructor(call: DepositERC20Call) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DepositERC20Call__Outputs {
  _call: DepositERC20Call;

  constructor(call: DepositERC20Call) {
    this._call = call;
  }
}

export class DepositERC20ForUserCall extends ethereum.Call {
  get inputs(): DepositERC20ForUserCall__Inputs {
    return new DepositERC20ForUserCall__Inputs(this);
  }

  get outputs(): DepositERC20ForUserCall__Outputs {
    return new DepositERC20ForUserCall__Outputs(this);
  }
}

export class DepositERC20ForUserCall__Inputs {
  _call: DepositERC20ForUserCall;

  constructor(call: DepositERC20ForUserCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _user(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class DepositERC20ForUserCall__Outputs {
  _call: DepositERC20ForUserCall;

  constructor(call: DepositERC20ForUserCall) {
    this._call = call;
  }
}

export class DepositERC721Call extends ethereum.Call {
  get inputs(): DepositERC721Call__Inputs {
    return new DepositERC721Call__Inputs(this);
  }

  get outputs(): DepositERC721Call__Outputs {
    return new DepositERC721Call__Outputs(this);
  }
}

export class DepositERC721Call__Inputs {
  _call: DepositERC721Call;

  constructor(call: DepositERC721Call) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DepositERC721Call__Outputs {
  _call: DepositERC721Call;

  constructor(call: DepositERC721Call) {
    this._call = call;
  }
}

export class DepositERC721ForUserCall extends ethereum.Call {
  get inputs(): DepositERC721ForUserCall__Inputs {
    return new DepositERC721ForUserCall__Inputs(this);
  }

  get outputs(): DepositERC721ForUserCall__Outputs {
    return new DepositERC721ForUserCall__Outputs(this);
  }
}

export class DepositERC721ForUserCall__Inputs {
  _call: DepositERC721ForUserCall;

  constructor(call: DepositERC721ForUserCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _user(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class DepositERC721ForUserCall__Outputs {
  _call: DepositERC721ForUserCall;

  constructor(call: DepositERC721ForUserCall) {
    this._call = call;
  }
}

export class DepositEtherCall extends ethereum.Call {
  get inputs(): DepositEtherCall__Inputs {
    return new DepositEtherCall__Inputs(this);
  }

  get outputs(): DepositEtherCall__Outputs {
    return new DepositEtherCall__Outputs(this);
  }
}

export class DepositEtherCall__Inputs {
  _call: DepositEtherCall;

  constructor(call: DepositEtherCall) {
    this._call = call;
  }
}

export class DepositEtherCall__Outputs {
  _call: DepositEtherCall;

  constructor(call: DepositEtherCall) {
    this._call = call;
  }
}

export class LockCall extends ethereum.Call {
  get inputs(): LockCall__Inputs {
    return new LockCall__Inputs(this);
  }

  get outputs(): LockCall__Outputs {
    return new LockCall__Outputs(this);
  }
}

export class LockCall__Inputs {
  _call: LockCall;

  constructor(call: LockCall) {
    this._call = call;
  }
}

export class LockCall__Outputs {
  _call: LockCall;

  constructor(call: LockCall) {
    this._call = call;
  }
}

export class OnERC721ReceivedCall extends ethereum.Call {
  get inputs(): OnERC721ReceivedCall__Inputs {
    return new OnERC721ReceivedCall__Inputs(this);
  }

  get outputs(): OnERC721ReceivedCall__Outputs {
    return new OnERC721ReceivedCall__Outputs(this);
  }
}

export class OnERC721ReceivedCall__Inputs {
  _call: OnERC721ReceivedCall;

  constructor(call: OnERC721ReceivedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get value3(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class OnERC721ReceivedCall__Outputs {
  _call: OnERC721ReceivedCall;

  constructor(call: OnERC721ReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class TransferAssetsCall extends ethereum.Call {
  get inputs(): TransferAssetsCall__Inputs {
    return new TransferAssetsCall__Inputs(this);
  }

  get outputs(): TransferAssetsCall__Outputs {
    return new TransferAssetsCall__Outputs(this);
  }
}

export class TransferAssetsCall__Inputs {
  _call: TransferAssetsCall;

  constructor(call: TransferAssetsCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _user(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _amountOrNFTId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferAssetsCall__Outputs {
  _call: TransferAssetsCall;

  constructor(call: TransferAssetsCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UnlockCall extends ethereum.Call {
  get inputs(): UnlockCall__Inputs {
    return new UnlockCall__Inputs(this);
  }

  get outputs(): UnlockCall__Outputs {
    return new UnlockCall__Outputs(this);
  }
}

export class UnlockCall__Inputs {
  _call: UnlockCall;

  constructor(call: UnlockCall) {
    this._call = call;
  }
}

export class UnlockCall__Outputs {
  _call: UnlockCall;

  constructor(call: UnlockCall) {
    this._call = call;
  }
}

export class UpdateChildChainAndStateSenderCall extends ethereum.Call {
  get inputs(): UpdateChildChainAndStateSenderCall__Inputs {
    return new UpdateChildChainAndStateSenderCall__Inputs(this);
  }

  get outputs(): UpdateChildChainAndStateSenderCall__Outputs {
    return new UpdateChildChainAndStateSenderCall__Outputs(this);
  }
}

export class UpdateChildChainAndStateSenderCall__Inputs {
  _call: UpdateChildChainAndStateSenderCall;

  constructor(call: UpdateChildChainAndStateSenderCall) {
    this._call = call;
  }
}

export class UpdateChildChainAndStateSenderCall__Outputs {
  _call: UpdateChildChainAndStateSenderCall;

  constructor(call: UpdateChildChainAndStateSenderCall) {
    this._call = call;
  }
}

export class UpdateMaxErc20DepositCall extends ethereum.Call {
  get inputs(): UpdateMaxErc20DepositCall__Inputs {
    return new UpdateMaxErc20DepositCall__Inputs(this);
  }

  get outputs(): UpdateMaxErc20DepositCall__Outputs {
    return new UpdateMaxErc20DepositCall__Outputs(this);
  }
}

export class UpdateMaxErc20DepositCall__Inputs {
  _call: UpdateMaxErc20DepositCall;

  constructor(call: UpdateMaxErc20DepositCall) {
    this._call = call;
  }

  get maxDepositAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateMaxErc20DepositCall__Outputs {
  _call: UpdateMaxErc20DepositCall;

  constructor(call: UpdateMaxErc20DepositCall) {
    this._call = call;
  }
}

export class UpdateRootChainCall extends ethereum.Call {
  get inputs(): UpdateRootChainCall__Inputs {
    return new UpdateRootChainCall__Inputs(this);
  }

  get outputs(): UpdateRootChainCall__Outputs {
    return new UpdateRootChainCall__Outputs(this);
  }
}

export class UpdateRootChainCall__Inputs {
  _call: UpdateRootChainCall;

  constructor(call: UpdateRootChainCall) {
    this._call = call;
  }

  get _rootChain(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateRootChainCall__Outputs {
  _call: UpdateRootChainCall;

  constructor(call: UpdateRootChainCall) {
    this._call = call;
  }
}
