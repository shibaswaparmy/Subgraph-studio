// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class MetaTransactionExecuted extends ethereum.Event {
  get params(): MetaTransactionExecuted__Params {
    return new MetaTransactionExecuted__Params(this);
  }
}

export class MetaTransactionExecuted__Params {
  _event: MetaTransactionExecuted;

  constructor(event: MetaTransactionExecuted) {
    this._event = event;
  }

  get userAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get relayerAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get functionSignature(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class PredicateRegistered extends ethereum.Event {
  get params(): PredicateRegistered__Params {
    return new PredicateRegistered__Params(this);
  }
}

export class PredicateRegistered__Params {
  _event: PredicateRegistered;

  constructor(event: PredicateRegistered) {
    this._event = event;
  }

  get tokenType(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get predicateAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class RoleAdminChanged extends ethereum.Event {
  get params(): RoleAdminChanged__Params {
    return new RoleAdminChanged__Params(this);
  }
}

export class RoleAdminChanged__Params {
  _event: RoleAdminChanged;

  constructor(event: RoleAdminChanged) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get previousAdminRole(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get newAdminRole(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class RoleGranted extends ethereum.Event {
  get params(): RoleGranted__Params {
    return new RoleGranted__Params(this);
  }
}

export class RoleGranted__Params {
  _event: RoleGranted;

  constructor(event: RoleGranted) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class RoleRevoked extends ethereum.Event {
  get params(): RoleRevoked__Params {
    return new RoleRevoked__Params(this);
  }
}

export class RoleRevoked__Params {
  _event: RoleRevoked;

  constructor(event: RoleRevoked) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class TokenMapped extends ethereum.Event {
  get params(): TokenMapped__Params {
    return new TokenMapped__Params(this);
  }
}

export class TokenMapped__Params {
  _event: TokenMapped;

  constructor(event: TokenMapped) {
    this._event = event;
  }

  get rootToken(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get childToken(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenType(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class RootChainManager extends ethereum.SmartContract {
  static bind(address: Address): RootChainManager {
    return new RootChainManager("RootChainManager", address);
  }

  DEFAULT_ADMIN_ROLE(): Bytes {
    let result = super.call(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_DEFAULT_ADMIN_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  DEPOSIT(): Bytes {
    let result = super.call("DEPOSIT", "DEPOSIT():(bytes32)", []);

    return result[0].toBytes();
  }

  try_DEPOSIT(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("DEPOSIT", "DEPOSIT():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  ERC712_VERSION(): string {
    let result = super.call("ERC712_VERSION", "ERC712_VERSION():(string)", []);

    return result[0].toString();
  }

  try_ERC712_VERSION(): ethereum.CallResult<string> {
    let result = super.tryCall(
      "ERC712_VERSION",
      "ERC712_VERSION():(string)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  ETHER_ADDRESS(): Address {
    let result = super.call("ETHER_ADDRESS", "ETHER_ADDRESS():(address)", []);

    return result[0].toAddress();
  }

  try_ETHER_ADDRESS(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "ETHER_ADDRESS",
      "ETHER_ADDRESS():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  MAPPER_ROLE(): Bytes {
    let result = super.call("MAPPER_ROLE", "MAPPER_ROLE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_MAPPER_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("MAPPER_ROLE", "MAPPER_ROLE():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  MAP_TOKEN(): Bytes {
    let result = super.call("MAP_TOKEN", "MAP_TOKEN():(bytes32)", []);

    return result[0].toBytes();
  }

  try_MAP_TOKEN(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("MAP_TOKEN", "MAP_TOKEN():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  childChainManagerAddress(): Address {
    let result = super.call(
      "childChainManagerAddress",
      "childChainManagerAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_childChainManagerAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "childChainManagerAddress",
      "childChainManagerAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  childToRootToken(param0: Address): Address {
    let result = super.call(
      "childToRootToken",
      "childToRootToken(address):(address)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toAddress();
  }

  try_childToRootToken(param0: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "childToRootToken",
      "childToRootToken(address):(address)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getChainId(): BigInt {
    let result = super.call("getChainId", "getChainId():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getChainId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getChainId", "getChainId():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getDomainSeperator(): Bytes {
    let result = super.call(
      "getDomainSeperator",
      "getDomainSeperator():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_getDomainSeperator(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getDomainSeperator",
      "getDomainSeperator():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getNonce(user: Address): BigInt {
    let result = super.call("getNonce", "getNonce(address):(uint256)", [
      ethereum.Value.fromAddress(user)
    ]);

    return result[0].toBigInt();
  }

  try_getNonce(user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getNonce", "getNonce(address):(uint256)", [
      ethereum.Value.fromAddress(user)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRoleAdmin(role: Bytes): Bytes {
    let result = super.call("getRoleAdmin", "getRoleAdmin(bytes32):(bytes32)", [
      ethereum.Value.fromFixedBytes(role)
    ]);

    return result[0].toBytes();
  }

  try_getRoleAdmin(role: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getRoleAdmin",
      "getRoleAdmin(bytes32):(bytes32)",
      [ethereum.Value.fromFixedBytes(role)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getRoleMember(role: Bytes, index: BigInt): Address {
    let result = super.call(
      "getRoleMember",
      "getRoleMember(bytes32,uint256):(address)",
      [
        ethereum.Value.fromFixedBytes(role),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );

    return result[0].toAddress();
  }

  try_getRoleMember(role: Bytes, index: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getRoleMember",
      "getRoleMember(bytes32,uint256):(address)",
      [
        ethereum.Value.fromFixedBytes(role),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getRoleMemberCount(role: Bytes): BigInt {
    let result = super.call(
      "getRoleMemberCount",
      "getRoleMemberCount(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(role)]
    );

    return result[0].toBigInt();
  }

  try_getRoleMemberCount(role: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getRoleMemberCount",
      "getRoleMemberCount(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(role)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  hasRole(role: Bytes, account: Address): boolean {
    let result = super.call("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBoolean();
  }

  try_hasRole(role: Bytes, account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  processedExits(param0: Bytes): boolean {
    let result = super.call(
      "processedExits",
      "processedExits(bytes32):(bool)",
      [ethereum.Value.fromFixedBytes(param0)]
    );

    return result[0].toBoolean();
  }

  try_processedExits(param0: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "processedExits",
      "processedExits(bytes32):(bool)",
      [ethereum.Value.fromFixedBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  rootToChildToken(param0: Address): Address {
    let result = super.call(
      "rootToChildToken",
      "rootToChildToken(address):(address)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toAddress();
  }

  try_rootToChildToken(param0: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "rootToChildToken",
      "rootToChildToken(address):(address)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tokenToType(param0: Address): Bytes {
    let result = super.call("tokenToType", "tokenToType(address):(bytes32)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBytes();
  }

  try_tokenToType(param0: Address): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "tokenToType",
      "tokenToType(address):(bytes32)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  typeToPredicate(param0: Bytes): Address {
    let result = super.call(
      "typeToPredicate",
      "typeToPredicate(bytes32):(address)",
      [ethereum.Value.fromFixedBytes(param0)]
    );

    return result[0].toAddress();
  }

  try_typeToPredicate(param0: Bytes): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "typeToPredicate",
      "typeToPredicate(bytes32):(address)",
      [ethereum.Value.fromFixedBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  stateSenderAddress(): Address {
    let result = super.call(
      "stateSenderAddress",
      "stateSenderAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_stateSenderAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "stateSenderAddress",
      "stateSenderAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  checkpointManagerAddress(): Address {
    let result = super.call(
      "checkpointManagerAddress",
      "checkpointManagerAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_checkpointManagerAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "checkpointManagerAddress",
      "checkpointManagerAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ExecuteMetaTransactionCall extends ethereum.Call {
  get inputs(): ExecuteMetaTransactionCall__Inputs {
    return new ExecuteMetaTransactionCall__Inputs(this);
  }

  get outputs(): ExecuteMetaTransactionCall__Outputs {
    return new ExecuteMetaTransactionCall__Outputs(this);
  }
}

export class ExecuteMetaTransactionCall__Inputs {
  _call: ExecuteMetaTransactionCall;

  constructor(call: ExecuteMetaTransactionCall) {
    this._call = call;
  }

  get userAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get functionSignature(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get sigR(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get sigS(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get sigV(): i32 {
    return this._call.inputValues[4].value.toI32();
  }
}

export class ExecuteMetaTransactionCall__Outputs {
  _call: ExecuteMetaTransactionCall;

  constructor(call: ExecuteMetaTransactionCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class GrantRoleCall extends ethereum.Call {
  get inputs(): GrantRoleCall__Inputs {
    return new GrantRoleCall__Inputs(this);
  }

  get outputs(): GrantRoleCall__Outputs {
    return new GrantRoleCall__Outputs(this);
  }
}

export class GrantRoleCall__Inputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class GrantRoleCall__Outputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }
}

export class RenounceRoleCall extends ethereum.Call {
  get inputs(): RenounceRoleCall__Inputs {
    return new RenounceRoleCall__Inputs(this);
  }

  get outputs(): RenounceRoleCall__Outputs {
    return new RenounceRoleCall__Outputs(this);
  }
}

export class RenounceRoleCall__Inputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RenounceRoleCall__Outputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }
}

export class RevokeRoleCall extends ethereum.Call {
  get inputs(): RevokeRoleCall__Inputs {
    return new RevokeRoleCall__Inputs(this);
  }

  get outputs(): RevokeRoleCall__Outputs {
    return new RevokeRoleCall__Outputs(this);
  }
}

export class RevokeRoleCall__Inputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RevokeRoleCall__Outputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class SetupContractIdCall extends ethereum.Call {
  get inputs(): SetupContractIdCall__Inputs {
    return new SetupContractIdCall__Inputs(this);
  }

  get outputs(): SetupContractIdCall__Outputs {
    return new SetupContractIdCall__Outputs(this);
  }
}

export class SetupContractIdCall__Inputs {
  _call: SetupContractIdCall;

  constructor(call: SetupContractIdCall) {
    this._call = call;
  }
}

export class SetupContractIdCall__Outputs {
  _call: SetupContractIdCall;

  constructor(call: SetupContractIdCall) {
    this._call = call;
  }
}

export class InitializeEIP712Call extends ethereum.Call {
  get inputs(): InitializeEIP712Call__Inputs {
    return new InitializeEIP712Call__Inputs(this);
  }

  get outputs(): InitializeEIP712Call__Outputs {
    return new InitializeEIP712Call__Outputs(this);
  }
}

export class InitializeEIP712Call__Inputs {
  _call: InitializeEIP712Call;

  constructor(call: InitializeEIP712Call) {
    this._call = call;
  }
}

export class InitializeEIP712Call__Outputs {
  _call: InitializeEIP712Call;

  constructor(call: InitializeEIP712Call) {
    this._call = call;
  }
}

export class SetStateSenderCall extends ethereum.Call {
  get inputs(): SetStateSenderCall__Inputs {
    return new SetStateSenderCall__Inputs(this);
  }

  get outputs(): SetStateSenderCall__Outputs {
    return new SetStateSenderCall__Outputs(this);
  }
}

export class SetStateSenderCall__Inputs {
  _call: SetStateSenderCall;

  constructor(call: SetStateSenderCall) {
    this._call = call;
  }

  get newStateSender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetStateSenderCall__Outputs {
  _call: SetStateSenderCall;

  constructor(call: SetStateSenderCall) {
    this._call = call;
  }
}

export class SetCheckpointManagerCall extends ethereum.Call {
  get inputs(): SetCheckpointManagerCall__Inputs {
    return new SetCheckpointManagerCall__Inputs(this);
  }

  get outputs(): SetCheckpointManagerCall__Outputs {
    return new SetCheckpointManagerCall__Outputs(this);
  }
}

export class SetCheckpointManagerCall__Inputs {
  _call: SetCheckpointManagerCall;

  constructor(call: SetCheckpointManagerCall) {
    this._call = call;
  }

  get newCheckpointManager(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetCheckpointManagerCall__Outputs {
  _call: SetCheckpointManagerCall;

  constructor(call: SetCheckpointManagerCall) {
    this._call = call;
  }
}

export class SetChildChainManagerAddressCall extends ethereum.Call {
  get inputs(): SetChildChainManagerAddressCall__Inputs {
    return new SetChildChainManagerAddressCall__Inputs(this);
  }

  get outputs(): SetChildChainManagerAddressCall__Outputs {
    return new SetChildChainManagerAddressCall__Outputs(this);
  }
}

export class SetChildChainManagerAddressCall__Inputs {
  _call: SetChildChainManagerAddressCall;

  constructor(call: SetChildChainManagerAddressCall) {
    this._call = call;
  }

  get newChildChainManager(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetChildChainManagerAddressCall__Outputs {
  _call: SetChildChainManagerAddressCall;

  constructor(call: SetChildChainManagerAddressCall) {
    this._call = call;
  }
}

export class RegisterPredicateCall extends ethereum.Call {
  get inputs(): RegisterPredicateCall__Inputs {
    return new RegisterPredicateCall__Inputs(this);
  }

  get outputs(): RegisterPredicateCall__Outputs {
    return new RegisterPredicateCall__Outputs(this);
  }
}

export class RegisterPredicateCall__Inputs {
  _call: RegisterPredicateCall;

  constructor(call: RegisterPredicateCall) {
    this._call = call;
  }

  get tokenType(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get predicateAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RegisterPredicateCall__Outputs {
  _call: RegisterPredicateCall;

  constructor(call: RegisterPredicateCall) {
    this._call = call;
  }
}

export class MapTokenCall extends ethereum.Call {
  get inputs(): MapTokenCall__Inputs {
    return new MapTokenCall__Inputs(this);
  }

  get outputs(): MapTokenCall__Outputs {
    return new MapTokenCall__Outputs(this);
  }
}

export class MapTokenCall__Inputs {
  _call: MapTokenCall;

  constructor(call: MapTokenCall) {
    this._call = call;
  }

  get rootToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get childToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenType(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class MapTokenCall__Outputs {
  _call: MapTokenCall;

  constructor(call: MapTokenCall) {
    this._call = call;
  }
}

export class RemapTokenCall extends ethereum.Call {
  get inputs(): RemapTokenCall__Inputs {
    return new RemapTokenCall__Inputs(this);
  }

  get outputs(): RemapTokenCall__Outputs {
    return new RemapTokenCall__Outputs(this);
  }
}

export class RemapTokenCall__Inputs {
  _call: RemapTokenCall;

  constructor(call: RemapTokenCall) {
    this._call = call;
  }

  get rootToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get childToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenType(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class RemapTokenCall__Outputs {
  _call: RemapTokenCall;

  constructor(call: RemapTokenCall) {
    this._call = call;
  }
}

export class DepositEtherForCall extends ethereum.Call {
  get inputs(): DepositEtherForCall__Inputs {
    return new DepositEtherForCall__Inputs(this);
  }

  get outputs(): DepositEtherForCall__Outputs {
    return new DepositEtherForCall__Outputs(this);
  }
}

export class DepositEtherForCall__Inputs {
  _call: DepositEtherForCall;

  constructor(call: DepositEtherForCall) {
    this._call = call;
  }

  get user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class DepositEtherForCall__Outputs {
  _call: DepositEtherForCall;

  constructor(call: DepositEtherForCall) {
    this._call = call;
  }
}

export class DepositForCall extends ethereum.Call {
  get inputs(): DepositForCall__Inputs {
    return new DepositForCall__Inputs(this);
  }

  get outputs(): DepositForCall__Outputs {
    return new DepositForCall__Outputs(this);
  }
}

export class DepositForCall__Inputs {
  _call: DepositForCall;

  constructor(call: DepositForCall) {
    this._call = call;
  }

  get user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get rootToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get depositData(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class DepositForCall__Outputs {
  _call: DepositForCall;

  constructor(call: DepositForCall) {
    this._call = call;
  }
}

export class ExitCall extends ethereum.Call {
  get inputs(): ExitCall__Inputs {
    return new ExitCall__Inputs(this);
  }

  get outputs(): ExitCall__Outputs {
    return new ExitCall__Outputs(this);
  }
}

export class ExitCall__Inputs {
  _call: ExitCall;

  constructor(call: ExitCall) {
    this._call = call;
  }

  get inputData(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class ExitCall__Outputs {
  _call: ExitCall;

  constructor(call: ExitCall) {
    this._call = call;
  }
}
