// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ClaimFee extends ethereum.Event {
  get params(): ClaimFee__Params {
    return new ClaimFee__Params(this);
  }
}

export class ClaimFee__Params {
  _event: ClaimFee;

  constructor(event: ClaimFee) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get fee(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class ClaimRewards extends ethereum.Event {
  get params(): ClaimRewards__Params {
    return new ClaimRewards__Params(this);
  }
}

export class ClaimRewards__Params {
  _event: ClaimRewards;

  constructor(event: ClaimRewards) {
    this._event = event;
  }

  get validatorId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get totalAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ConfirmAuction extends ethereum.Event {
  get params(): ConfirmAuction__Params {
    return new ConfirmAuction__Params(this);
  }
}

export class ConfirmAuction__Params {
  _event: ConfirmAuction;

  constructor(event: ConfirmAuction) {
    this._event = event;
  }

  get newValidatorId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get oldValidatorId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class DelegatorClaimedRewards extends ethereum.Event {
  get params(): DelegatorClaimedRewards__Params {
    return new DelegatorClaimedRewards__Params(this);
  }
}

export class DelegatorClaimedRewards__Params {
  _event: DelegatorClaimedRewards;

  constructor(event: DelegatorClaimedRewards) {
    this._event = event;
  }

  get validatorId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get user(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get rewards(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class DelegatorRestaked extends ethereum.Event {
  get params(): DelegatorRestaked__Params {
    return new DelegatorRestaked__Params(this);
  }
}

export class DelegatorRestaked__Params {
  _event: DelegatorRestaked;

  constructor(event: DelegatorRestaked) {
    this._event = event;
  }

  get validatorId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get user(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get totalStaked(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class DelegatorUnstaked extends ethereum.Event {
  get params(): DelegatorUnstaked__Params {
    return new DelegatorUnstaked__Params(this);
  }
}

export class DelegatorUnstaked__Params {
  _event: DelegatorUnstaked;

  constructor(event: DelegatorUnstaked) {
    this._event = event;
  }

  get validatorId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get user(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class DynastyValueChange extends ethereum.Event {
  get params(): DynastyValueChange__Params {
    return new DynastyValueChange__Params(this);
  }
}

export class DynastyValueChange__Params {
  _event: DynastyValueChange;

  constructor(event: DynastyValueChange) {
    this._event = event;
  }

  get newDynasty(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get oldDynasty(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Jailed extends ethereum.Event {
  get params(): Jailed__Params {
    return new Jailed__Params(this);
  }
}

export class Jailed__Params {
  _event: Jailed;

  constructor(event: Jailed) {
    this._event = event;
  }

  get validatorId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get exitEpoch(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get signer(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class StakingInfoOwnershipTransferred extends ethereum.Event {
  get params(): StakingInfoOwnershipTransferred__Params {
    return new StakingInfoOwnershipTransferred__Params(this);
  }
}

export class StakingInfoOwnershipTransferred__Params {
  _event: StakingInfoOwnershipTransferred;

  constructor(event: StakingInfoOwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class ProposerBonusChange extends ethereum.Event {
  get params(): ProposerBonusChange__Params {
    return new ProposerBonusChange__Params(this);
  }
}

export class ProposerBonusChange__Params {
  _event: ProposerBonusChange;

  constructor(event: ProposerBonusChange) {
    this._event = event;
  }

  get newProposerBonus(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get oldProposerBonus(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Restaked extends ethereum.Event {
  get params(): Restaked__Params {
    return new Restaked__Params(this);
  }
}

export class Restaked__Params {
  _event: Restaked;

  constructor(event: Restaked) {
    this._event = event;
  }

  get validatorId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get total(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class RewardUpdate extends ethereum.Event {
  get params(): RewardUpdate__Params {
    return new RewardUpdate__Params(this);
  }
}

export class RewardUpdate__Params {
  _event: RewardUpdate;

  constructor(event: RewardUpdate) {
    this._event = event;
  }

  get newReward(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get oldReward(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class ShareBurned extends ethereum.Event {
  get params(): ShareBurned__Params {
    return new ShareBurned__Params(this);
  }
}

export class ShareBurned__Params {
  _event: ShareBurned;

  constructor(event: ShareBurned) {
    this._event = event;
  }

  get validatorId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get user(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get tokens(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class ShareMinted extends ethereum.Event {
  get params(): ShareMinted__Params {
    return new ShareMinted__Params(this);
  }
}

export class ShareMinted__Params {
  _event: ShareMinted;

  constructor(event: ShareMinted) {
    this._event = event;
  }

  get validatorId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get user(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get tokens(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class SignerChange extends ethereum.Event {
  get params(): SignerChange__Params {
    return new SignerChange__Params(this);
  }
}

export class SignerChange__Params {
  _event: SignerChange;

  constructor(event: SignerChange) {
    this._event = event;
  }

  get validatorId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get nonce(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get oldSigner(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get newSigner(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get signerPubkey(): Bytes {
    return this._event.parameters[4].value.toBytes();
  }
}

export class Slashed extends ethereum.Event {
  get params(): Slashed__Params {
    return new Slashed__Params(this);
  }
}

export class Slashed__Params {
  _event: Slashed;

  constructor(event: Slashed) {
    this._event = event;
  }

  get nonce(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class StakeUpdate extends ethereum.Event {
  get params(): StakeUpdate__Params {
    return new StakeUpdate__Params(this);
  }
}

export class StakeUpdate__Params {
  _event: StakeUpdate;

  constructor(event: StakeUpdate) {
    this._event = event;
  }

  get validatorId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get nonce(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get newAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Staked extends ethereum.Event {
  get params(): Staked__Params {
    return new Staked__Params(this);
  }
}

export class Staked__Params {
  _event: Staked;

  constructor(event: Staked) {
    this._event = event;
  }

  get signer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get validatorId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get nonce(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get activationEpoch(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get total(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get signerPubkey(): Bytes {
    return this._event.parameters[6].value.toBytes();
  }
}

export class StartAuction extends ethereum.Event {
  get params(): StartAuction__Params {
    return new StartAuction__Params(this);
  }
}

export class StartAuction__Params {
  _event: StartAuction;

  constructor(event: StartAuction) {
    this._event = event;
  }

  get validatorId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get auctionAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ThresholdChange extends ethereum.Event {
  get params(): ThresholdChange__Params {
    return new ThresholdChange__Params(this);
  }
}

export class ThresholdChange__Params {
  _event: ThresholdChange;

  constructor(event: ThresholdChange) {
    this._event = event;
  }

  get newThreshold(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get oldThreshold(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class TopUpFee extends ethereum.Event {
  get params(): TopUpFee__Params {
    return new TopUpFee__Params(this);
  }
}

export class TopUpFee__Params {
  _event: TopUpFee;

  constructor(event: TopUpFee) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get fee(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class UnJailed extends ethereum.Event {
  get params(): UnJailed__Params {
    return new UnJailed__Params(this);
  }
}

export class UnJailed__Params {
  _event: UnJailed;

  constructor(event: UnJailed) {
    this._event = event;
  }

  get validatorId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get signer(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class UnstakeInit extends ethereum.Event {
  get params(): UnstakeInit__Params {
    return new UnstakeInit__Params(this);
  }
}

export class UnstakeInit__Params {
  _event: UnstakeInit;

  constructor(event: UnstakeInit) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get validatorId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get nonce(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get deactivationEpoch(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class Unstaked extends ethereum.Event {
  get params(): Unstaked__Params {
    return new Unstaked__Params(this);
  }
}

export class Unstaked__Params {
  _event: Unstaked;

  constructor(event: Unstaked) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get validatorId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get total(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class UpdateCommissionRate extends ethereum.Event {
  get params(): UpdateCommissionRate__Params {
    return new UpdateCommissionRate__Params(this);
  }
}

export class UpdateCommissionRate__Params {
  _event: UpdateCommissionRate;

  constructor(event: UpdateCommissionRate) {
    this._event = event;
  }

  get validatorId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newCommissionRate(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get oldCommissionRate(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class StakingInfo__getStakerDetailsResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: Address;
  value5: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: Address,
    value5: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromAddress(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    return map;
  }

  getAmount(): BigInt {
    return this.value0;
  }

  getReward(): BigInt {
    return this.value1;
  }

  getActivationEpoch(): BigInt {
    return this.value2;
  }

  getDeactivationEpoch(): BigInt {
    return this.value3;
  }

  getSigner(): Address {
    return this.value4;
  }

  get_status(): BigInt {
    return this.value5;
  }
}

export class StakingInfo extends ethereum.SmartContract {
  static bind(address: Address): StakingInfo {
    return new StakingInfo("StakingInfo", address);
  }

  getAccountStateRoot(): Bytes {
    let result = super.call(
      "getAccountStateRoot",
      "getAccountStateRoot():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_getAccountStateRoot(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getAccountStateRoot",
      "getAccountStateRoot():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getStakerDetails(validatorId: BigInt): StakingInfo__getStakerDetailsResult {
    let result = super.call(
      "getStakerDetails",
      "getStakerDetails(uint256):(uint256,uint256,uint256,uint256,address,uint256)",
      [ethereum.Value.fromUnsignedBigInt(validatorId)]
    );

    return new StakingInfo__getStakerDetailsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toAddress(),
      result[5].toBigInt()
    );
  }

  try_getStakerDetails(
    validatorId: BigInt
  ): ethereum.CallResult<StakingInfo__getStakerDetailsResult> {
    let result = super.tryCall(
      "getStakerDetails",
      "getStakerDetails(uint256):(uint256,uint256,uint256,uint256,address,uint256)",
      [ethereum.Value.fromUnsignedBigInt(validatorId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new StakingInfo__getStakerDetailsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toAddress(),
        value[5].toBigInt()
      )
    );
  }

  getValidatorContractAddress(validatorId: BigInt): Address {
    let result = super.call(
      "getValidatorContractAddress",
      "getValidatorContractAddress(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(validatorId)]
    );

    return result[0].toAddress();
  }

  try_getValidatorContractAddress(
    validatorId: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getValidatorContractAddress",
      "getValidatorContractAddress(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(validatorId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isOwner(): boolean {
    let result = super.call("isOwner", "isOwner():(bool)", []);

    return result[0].toBoolean();
  }

  try_isOwner(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isOwner", "isOwner():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  registry(): Address {
    let result = super.call("registry", "registry():(address)", []);

    return result[0].toAddress();
  }

  try_registry(): ethereum.CallResult<Address> {
    let result = super.tryCall("registry", "registry():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  totalValidatorStake(validatorId: BigInt): BigInt {
    let result = super.call(
      "totalValidatorStake",
      "totalValidatorStake(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(validatorId)]
    );

    return result[0].toBigInt();
  }

  try_totalValidatorStake(validatorId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalValidatorStake",
      "totalValidatorStake(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(validatorId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  validatorNonce(param0: BigInt): BigInt {
    let result = super.call(
      "validatorNonce",
      "validatorNonce(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_validatorNonce(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "validatorNonce",
      "validatorNonce(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _registry(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class LogClaimFeeCall extends ethereum.Call {
  get inputs(): LogClaimFeeCall__Inputs {
    return new LogClaimFeeCall__Inputs(this);
  }

  get outputs(): LogClaimFeeCall__Outputs {
    return new LogClaimFeeCall__Outputs(this);
  }
}

export class LogClaimFeeCall__Inputs {
  _call: LogClaimFeeCall;

  constructor(call: LogClaimFeeCall) {
    this._call = call;
  }

  get user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get fee(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class LogClaimFeeCall__Outputs {
  _call: LogClaimFeeCall;

  constructor(call: LogClaimFeeCall) {
    this._call = call;
  }
}

export class LogClaimRewardsCall extends ethereum.Call {
  get inputs(): LogClaimRewardsCall__Inputs {
    return new LogClaimRewardsCall__Inputs(this);
  }

  get outputs(): LogClaimRewardsCall__Outputs {
    return new LogClaimRewardsCall__Outputs(this);
  }
}

export class LogClaimRewardsCall__Inputs {
  _call: LogClaimRewardsCall;

  constructor(call: LogClaimRewardsCall) {
    this._call = call;
  }

  get validatorId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get totalAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class LogClaimRewardsCall__Outputs {
  _call: LogClaimRewardsCall;

  constructor(call: LogClaimRewardsCall) {
    this._call = call;
  }
}

export class LogConfirmAuctionCall extends ethereum.Call {
  get inputs(): LogConfirmAuctionCall__Inputs {
    return new LogConfirmAuctionCall__Inputs(this);
  }

  get outputs(): LogConfirmAuctionCall__Outputs {
    return new LogConfirmAuctionCall__Outputs(this);
  }
}

export class LogConfirmAuctionCall__Inputs {
  _call: LogConfirmAuctionCall;

  constructor(call: LogConfirmAuctionCall) {
    this._call = call;
  }

  get newValidatorId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get oldValidatorId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class LogConfirmAuctionCall__Outputs {
  _call: LogConfirmAuctionCall;

  constructor(call: LogConfirmAuctionCall) {
    this._call = call;
  }
}

export class LogDelegatorClaimRewardsCall extends ethereum.Call {
  get inputs(): LogDelegatorClaimRewardsCall__Inputs {
    return new LogDelegatorClaimRewardsCall__Inputs(this);
  }

  get outputs(): LogDelegatorClaimRewardsCall__Outputs {
    return new LogDelegatorClaimRewardsCall__Outputs(this);
  }
}

export class LogDelegatorClaimRewardsCall__Inputs {
  _call: LogDelegatorClaimRewardsCall;

  constructor(call: LogDelegatorClaimRewardsCall) {
    this._call = call;
  }

  get validatorId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get user(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get rewards(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class LogDelegatorClaimRewardsCall__Outputs {
  _call: LogDelegatorClaimRewardsCall;

  constructor(call: LogDelegatorClaimRewardsCall) {
    this._call = call;
  }
}

export class LogDelegatorRestakedCall extends ethereum.Call {
  get inputs(): LogDelegatorRestakedCall__Inputs {
    return new LogDelegatorRestakedCall__Inputs(this);
  }

  get outputs(): LogDelegatorRestakedCall__Outputs {
    return new LogDelegatorRestakedCall__Outputs(this);
  }
}

export class LogDelegatorRestakedCall__Inputs {
  _call: LogDelegatorRestakedCall;

  constructor(call: LogDelegatorRestakedCall) {
    this._call = call;
  }

  get validatorId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get user(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get totalStaked(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class LogDelegatorRestakedCall__Outputs {
  _call: LogDelegatorRestakedCall;

  constructor(call: LogDelegatorRestakedCall) {
    this._call = call;
  }
}

export class LogDelegatorUnstakedCall extends ethereum.Call {
  get inputs(): LogDelegatorUnstakedCall__Inputs {
    return new LogDelegatorUnstakedCall__Inputs(this);
  }

  get outputs(): LogDelegatorUnstakedCall__Outputs {
    return new LogDelegatorUnstakedCall__Outputs(this);
  }
}

export class LogDelegatorUnstakedCall__Inputs {
  _call: LogDelegatorUnstakedCall;

  constructor(call: LogDelegatorUnstakedCall) {
    this._call = call;
  }

  get validatorId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get user(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class LogDelegatorUnstakedCall__Outputs {
  _call: LogDelegatorUnstakedCall;

  constructor(call: LogDelegatorUnstakedCall) {
    this._call = call;
  }
}

export class LogDynastyValueChangeCall extends ethereum.Call {
  get inputs(): LogDynastyValueChangeCall__Inputs {
    return new LogDynastyValueChangeCall__Inputs(this);
  }

  get outputs(): LogDynastyValueChangeCall__Outputs {
    return new LogDynastyValueChangeCall__Outputs(this);
  }
}

export class LogDynastyValueChangeCall__Inputs {
  _call: LogDynastyValueChangeCall;

  constructor(call: LogDynastyValueChangeCall) {
    this._call = call;
  }

  get newDynasty(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get oldDynasty(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class LogDynastyValueChangeCall__Outputs {
  _call: LogDynastyValueChangeCall;

  constructor(call: LogDynastyValueChangeCall) {
    this._call = call;
  }
}

export class LogJailedCall extends ethereum.Call {
  get inputs(): LogJailedCall__Inputs {
    return new LogJailedCall__Inputs(this);
  }

  get outputs(): LogJailedCall__Outputs {
    return new LogJailedCall__Outputs(this);
  }
}

export class LogJailedCall__Inputs {
  _call: LogJailedCall;

  constructor(call: LogJailedCall) {
    this._call = call;
  }

  get validatorId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get exitEpoch(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get signer(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class LogJailedCall__Outputs {
  _call: LogJailedCall;

  constructor(call: LogJailedCall) {
    this._call = call;
  }
}

export class LogProposerBonusChangeCall extends ethereum.Call {
  get inputs(): LogProposerBonusChangeCall__Inputs {
    return new LogProposerBonusChangeCall__Inputs(this);
  }

  get outputs(): LogProposerBonusChangeCall__Outputs {
    return new LogProposerBonusChangeCall__Outputs(this);
  }
}

export class LogProposerBonusChangeCall__Inputs {
  _call: LogProposerBonusChangeCall;

  constructor(call: LogProposerBonusChangeCall) {
    this._call = call;
  }

  get newProposerBonus(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get oldProposerBonus(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class LogProposerBonusChangeCall__Outputs {
  _call: LogProposerBonusChangeCall;

  constructor(call: LogProposerBonusChangeCall) {
    this._call = call;
  }
}

export class LogRestakedCall extends ethereum.Call {
  get inputs(): LogRestakedCall__Inputs {
    return new LogRestakedCall__Inputs(this);
  }

  get outputs(): LogRestakedCall__Outputs {
    return new LogRestakedCall__Outputs(this);
  }
}

export class LogRestakedCall__Inputs {
  _call: LogRestakedCall;

  constructor(call: LogRestakedCall) {
    this._call = call;
  }

  get validatorId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get total(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class LogRestakedCall__Outputs {
  _call: LogRestakedCall;

  constructor(call: LogRestakedCall) {
    this._call = call;
  }
}

export class LogRewardUpdateCall extends ethereum.Call {
  get inputs(): LogRewardUpdateCall__Inputs {
    return new LogRewardUpdateCall__Inputs(this);
  }

  get outputs(): LogRewardUpdateCall__Outputs {
    return new LogRewardUpdateCall__Outputs(this);
  }
}

export class LogRewardUpdateCall__Inputs {
  _call: LogRewardUpdateCall;

  constructor(call: LogRewardUpdateCall) {
    this._call = call;
  }

  get newReward(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get oldReward(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class LogRewardUpdateCall__Outputs {
  _call: LogRewardUpdateCall;

  constructor(call: LogRewardUpdateCall) {
    this._call = call;
  }
}

export class LogShareBurnedCall extends ethereum.Call {
  get inputs(): LogShareBurnedCall__Inputs {
    return new LogShareBurnedCall__Inputs(this);
  }

  get outputs(): LogShareBurnedCall__Outputs {
    return new LogShareBurnedCall__Outputs(this);
  }
}

export class LogShareBurnedCall__Inputs {
  _call: LogShareBurnedCall;

  constructor(call: LogShareBurnedCall) {
    this._call = call;
  }

  get validatorId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get user(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get tokens(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class LogShareBurnedCall__Outputs {
  _call: LogShareBurnedCall;

  constructor(call: LogShareBurnedCall) {
    this._call = call;
  }
}

export class LogShareMintedCall extends ethereum.Call {
  get inputs(): LogShareMintedCall__Inputs {
    return new LogShareMintedCall__Inputs(this);
  }

  get outputs(): LogShareMintedCall__Outputs {
    return new LogShareMintedCall__Outputs(this);
  }
}

export class LogShareMintedCall__Inputs {
  _call: LogShareMintedCall;

  constructor(call: LogShareMintedCall) {
    this._call = call;
  }

  get validatorId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get user(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get tokens(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class LogShareMintedCall__Outputs {
  _call: LogShareMintedCall;

  constructor(call: LogShareMintedCall) {
    this._call = call;
  }
}

export class LogSignerChangeCall extends ethereum.Call {
  get inputs(): LogSignerChangeCall__Inputs {
    return new LogSignerChangeCall__Inputs(this);
  }

  get outputs(): LogSignerChangeCall__Outputs {
    return new LogSignerChangeCall__Outputs(this);
  }
}

export class LogSignerChangeCall__Inputs {
  _call: LogSignerChangeCall;

  constructor(call: LogSignerChangeCall) {
    this._call = call;
  }

  get validatorId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get oldSigner(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get newSigner(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get signerPubkey(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class LogSignerChangeCall__Outputs {
  _call: LogSignerChangeCall;

  constructor(call: LogSignerChangeCall) {
    this._call = call;
  }
}

export class LogSlashedCall extends ethereum.Call {
  get inputs(): LogSlashedCall__Inputs {
    return new LogSlashedCall__Inputs(this);
  }

  get outputs(): LogSlashedCall__Outputs {
    return new LogSlashedCall__Outputs(this);
  }
}

export class LogSlashedCall__Inputs {
  _call: LogSlashedCall;

  constructor(call: LogSlashedCall) {
    this._call = call;
  }

  get nonce(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class LogSlashedCall__Outputs {
  _call: LogSlashedCall;

  constructor(call: LogSlashedCall) {
    this._call = call;
  }
}

export class LogStakeUpdateCall extends ethereum.Call {
  get inputs(): LogStakeUpdateCall__Inputs {
    return new LogStakeUpdateCall__Inputs(this);
  }

  get outputs(): LogStakeUpdateCall__Outputs {
    return new LogStakeUpdateCall__Outputs(this);
  }
}

export class LogStakeUpdateCall__Inputs {
  _call: LogStakeUpdateCall;

  constructor(call: LogStakeUpdateCall) {
    this._call = call;
  }

  get validatorId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class LogStakeUpdateCall__Outputs {
  _call: LogStakeUpdateCall;

  constructor(call: LogStakeUpdateCall) {
    this._call = call;
  }
}

export class LogStakedCall extends ethereum.Call {
  get inputs(): LogStakedCall__Inputs {
    return new LogStakedCall__Inputs(this);
  }

  get outputs(): LogStakedCall__Outputs {
    return new LogStakedCall__Outputs(this);
  }
}

export class LogStakedCall__Inputs {
  _call: LogStakedCall;

  constructor(call: LogStakedCall) {
    this._call = call;
  }

  get signer(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get signerPubkey(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get validatorId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get activationEpoch(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get total(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class LogStakedCall__Outputs {
  _call: LogStakedCall;

  constructor(call: LogStakedCall) {
    this._call = call;
  }
}

export class LogStartAuctionCall extends ethereum.Call {
  get inputs(): LogStartAuctionCall__Inputs {
    return new LogStartAuctionCall__Inputs(this);
  }

  get outputs(): LogStartAuctionCall__Outputs {
    return new LogStartAuctionCall__Outputs(this);
  }
}

export class LogStartAuctionCall__Inputs {
  _call: LogStartAuctionCall;

  constructor(call: LogStartAuctionCall) {
    this._call = call;
  }

  get validatorId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get auctionAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class LogStartAuctionCall__Outputs {
  _call: LogStartAuctionCall;

  constructor(call: LogStartAuctionCall) {
    this._call = call;
  }
}

export class LogThresholdChangeCall extends ethereum.Call {
  get inputs(): LogThresholdChangeCall__Inputs {
    return new LogThresholdChangeCall__Inputs(this);
  }

  get outputs(): LogThresholdChangeCall__Outputs {
    return new LogThresholdChangeCall__Outputs(this);
  }
}

export class LogThresholdChangeCall__Inputs {
  _call: LogThresholdChangeCall;

  constructor(call: LogThresholdChangeCall) {
    this._call = call;
  }

  get newThreshold(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get oldThreshold(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class LogThresholdChangeCall__Outputs {
  _call: LogThresholdChangeCall;

  constructor(call: LogThresholdChangeCall) {
    this._call = call;
  }
}

export class LogTopUpFeeCall extends ethereum.Call {
  get inputs(): LogTopUpFeeCall__Inputs {
    return new LogTopUpFeeCall__Inputs(this);
  }

  get outputs(): LogTopUpFeeCall__Outputs {
    return new LogTopUpFeeCall__Outputs(this);
  }
}

export class LogTopUpFeeCall__Inputs {
  _call: LogTopUpFeeCall;

  constructor(call: LogTopUpFeeCall) {
    this._call = call;
  }

  get user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get fee(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class LogTopUpFeeCall__Outputs {
  _call: LogTopUpFeeCall;

  constructor(call: LogTopUpFeeCall) {
    this._call = call;
  }
}

export class LogUnjailedCall extends ethereum.Call {
  get inputs(): LogUnjailedCall__Inputs {
    return new LogUnjailedCall__Inputs(this);
  }

  get outputs(): LogUnjailedCall__Outputs {
    return new LogUnjailedCall__Outputs(this);
  }
}

export class LogUnjailedCall__Inputs {
  _call: LogUnjailedCall;

  constructor(call: LogUnjailedCall) {
    this._call = call;
  }

  get validatorId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get signer(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class LogUnjailedCall__Outputs {
  _call: LogUnjailedCall;

  constructor(call: LogUnjailedCall) {
    this._call = call;
  }
}

export class LogUnstakeInitCall extends ethereum.Call {
  get inputs(): LogUnstakeInitCall__Inputs {
    return new LogUnstakeInitCall__Inputs(this);
  }

  get outputs(): LogUnstakeInitCall__Outputs {
    return new LogUnstakeInitCall__Outputs(this);
  }
}

export class LogUnstakeInitCall__Inputs {
  _call: LogUnstakeInitCall;

  constructor(call: LogUnstakeInitCall) {
    this._call = call;
  }

  get user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get validatorId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get deactivationEpoch(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class LogUnstakeInitCall__Outputs {
  _call: LogUnstakeInitCall;

  constructor(call: LogUnstakeInitCall) {
    this._call = call;
  }
}

export class LogUnstakedCall extends ethereum.Call {
  get inputs(): LogUnstakedCall__Inputs {
    return new LogUnstakedCall__Inputs(this);
  }

  get outputs(): LogUnstakedCall__Outputs {
    return new LogUnstakedCall__Outputs(this);
  }
}

export class LogUnstakedCall__Inputs {
  _call: LogUnstakedCall;

  constructor(call: LogUnstakedCall) {
    this._call = call;
  }

  get user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get validatorId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get total(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class LogUnstakedCall__Outputs {
  _call: LogUnstakedCall;

  constructor(call: LogUnstakedCall) {
    this._call = call;
  }
}

export class LogUpdateCommissionRateCall extends ethereum.Call {
  get inputs(): LogUpdateCommissionRateCall__Inputs {
    return new LogUpdateCommissionRateCall__Inputs(this);
  }

  get outputs(): LogUpdateCommissionRateCall__Outputs {
    return new LogUpdateCommissionRateCall__Outputs(this);
  }
}

export class LogUpdateCommissionRateCall__Inputs {
  _call: LogUpdateCommissionRateCall;

  constructor(call: LogUpdateCommissionRateCall) {
    this._call = call;
  }

  get validatorId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get newCommissionRate(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get oldCommissionRate(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class LogUpdateCommissionRateCall__Outputs {
  _call: LogUpdateCommissionRateCall;

  constructor(call: LogUpdateCommissionRateCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdateNonceCall extends ethereum.Call {
  get inputs(): UpdateNonceCall__Inputs {
    return new UpdateNonceCall__Inputs(this);
  }

  get outputs(): UpdateNonceCall__Outputs {
    return new UpdateNonceCall__Outputs(this);
  }
}

export class UpdateNonceCall__Inputs {
  _call: UpdateNonceCall;

  constructor(call: UpdateNonceCall) {
    this._call = call;
  }

  get validatorIds(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get nonces(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class UpdateNonceCall__Outputs {
  _call: UpdateNonceCall;

  constructor(call: UpdateNonceCall) {
    this._call = call;
  }
}
