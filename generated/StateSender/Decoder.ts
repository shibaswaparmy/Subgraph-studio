// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Decoder__decodeERC1155BatchDepositResult {
  value0: Array<BigInt>;
  value1: Array<BigInt>;
  value2: Bytes;

  constructor(value0: Array<BigInt>, value1: Array<BigInt>, value2: Bytes) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigIntArray(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    map.set("value2", ethereum.Value.fromBytes(this.value2));
    return map;
  }

  getValue0(): Array<BigInt> {
    return this.value0;
  }

  getValue1(): Array<BigInt> {
    return this.value1;
  }

  getValue2(): Bytes {
    return this.value2;
  }
}

export class Decoder__decodeStateSyncDataResult {
  value0: i32;
  value1: Address;
  value2: Address;
  value3: Bytes;

  constructor(value0: i32, value1: Address, value2: Address, value3: Bytes) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set(
      "value0",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value0))
    );
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromBytes(this.value3));
    return map;
  }

  getValue0(): i32 {
    return this.value0;
  }

  getValue1(): Address {
    return this.value1;
  }

  getValue2(): Address {
    return this.value2;
  }

  getValue3(): Bytes {
    return this.value3;
  }
}

export class Decoder extends ethereum.SmartContract {
  static bind(address: Address): Decoder {
    return new Decoder("Decoder", address);
  }

  decodeERC1155BatchDeposit(
    depositData: Bytes
  ): Decoder__decodeERC1155BatchDepositResult {
    let result = super.call(
      "decodeERC1155BatchDeposit",
      "decodeERC1155BatchDeposit(bytes):(uint256[],uint256[],bytes)",
      [ethereum.Value.fromBytes(depositData)]
    );

    return new Decoder__decodeERC1155BatchDepositResult(
      result[0].toBigIntArray(),
      result[1].toBigIntArray(),
      result[2].toBytes()
    );
  }

  try_decodeERC1155BatchDeposit(
    depositData: Bytes
  ): ethereum.CallResult<Decoder__decodeERC1155BatchDepositResult> {
    let result = super.tryCall(
      "decodeERC1155BatchDeposit",
      "decodeERC1155BatchDeposit(bytes):(uint256[],uint256[],bytes)",
      [ethereum.Value.fromBytes(depositData)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Decoder__decodeERC1155BatchDepositResult(
        value[0].toBigIntArray(),
        value[1].toBigIntArray(),
        value[2].toBytes()
      )
    );
  }

  decodeERC20Deposit(depositData: Bytes): BigInt {
    let result = super.call(
      "decodeERC20Deposit",
      "decodeERC20Deposit(bytes):(uint256)",
      [ethereum.Value.fromBytes(depositData)]
    );

    return result[0].toBigInt();
  }

  try_decodeERC20Deposit(depositData: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "decodeERC20Deposit",
      "decodeERC20Deposit(bytes):(uint256)",
      [ethereum.Value.fromBytes(depositData)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  decodeERC721BatchDeposit(depositData: Bytes): Array<BigInt> {
    let result = super.call(
      "decodeERC721BatchDeposit",
      "decodeERC721BatchDeposit(bytes):(uint256[])",
      [ethereum.Value.fromBytes(depositData)]
    );

    return result[0].toBigIntArray();
  }

  try_decodeERC721BatchDeposit(
    depositData: Bytes
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "decodeERC721BatchDeposit",
      "decodeERC721BatchDeposit(bytes):(uint256[])",
      [ethereum.Value.fromBytes(depositData)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  decodeERC721SingleDeposit(depositData: Bytes): BigInt {
    let result = super.call(
      "decodeERC721SingleDeposit",
      "decodeERC721SingleDeposit(bytes):(uint256)",
      [ethereum.Value.fromBytes(depositData)]
    );

    return result[0].toBigInt();
  }

  try_decodeERC721SingleDeposit(
    depositData: Bytes
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "decodeERC721SingleDeposit",
      "decodeERC721SingleDeposit(bytes):(uint256)",
      [ethereum.Value.fromBytes(depositData)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  decodeStateSyncData(data: Bytes): Decoder__decodeStateSyncDataResult {
    let result = super.call(
      "decodeStateSyncData",
      "decodeStateSyncData(bytes):(uint8,address,address,bytes)",
      [ethereum.Value.fromBytes(data)]
    );

    return new Decoder__decodeStateSyncDataResult(
      result[0].toI32(),
      result[1].toAddress(),
      result[2].toAddress(),
      result[3].toBytes()
    );
  }

  try_decodeStateSyncData(
    data: Bytes
  ): ethereum.CallResult<Decoder__decodeStateSyncDataResult> {
    let result = super.tryCall(
      "decodeStateSyncData",
      "decodeStateSyncData(bytes):(uint8,address,address,bytes)",
      [ethereum.Value.fromBytes(data)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Decoder__decodeStateSyncDataResult(
        value[0].toI32(),
        value[1].toAddress(),
        value[2].toAddress(),
        value[3].toBytes()
      )
    );
  }

  DEPOSIT(): Bytes {
    let result = super.call("DEPOSIT", "DEPOSIT():(bytes32)", []);

    return result[0].toBytes();
  }

  try_DEPOSIT(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("DEPOSIT", "DEPOSIT():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  MAP_TOKEN(): Bytes {
    let result = super.call("MAP_TOKEN", "MAP_TOKEN():(bytes32)", []);

    return result[0].toBytes();
  }

  try_MAP_TOKEN(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("MAP_TOKEN", "MAP_TOKEN():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }
}
