// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class DelegatorUnstakeWithId extends ethereum.Event {
  get params(): DelegatorUnstakeWithId__Params {
    return new DelegatorUnstakeWithId__Params(this);
  }
}

export class DelegatorUnstakeWithId__Params {
  _event: DelegatorUnstakeWithId;

  constructor(event: DelegatorUnstakeWithId) {
    this._event = event;
  }

  get validatorId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get user(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get nonce(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class RewardParams extends ethereum.Event {
  get params(): RewardParams__Params {
    return new RewardParams__Params(this);
  }
}

export class RewardParams__Params {
  _event: RewardParams;

  constructor(event: RewardParams) {
    this._event = event;
  }

  get rewardDecreasePerCheckpoint(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get maxRewardedCheckpoints(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get checkpointRewardDelta(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ShareBurnedWithId extends ethereum.Event {
  get params(): ShareBurnedWithId__Params {
    return new ShareBurnedWithId__Params(this);
  }
}

export class ShareBurnedWithId__Params {
  _event: ShareBurnedWithId;

  constructor(event: ShareBurnedWithId) {
    this._event = event;
  }

  get validatorId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get user(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get tokens(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get nonce(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class SharesTransfer extends ethereum.Event {
  get params(): SharesTransfer__Params {
    return new SharesTransfer__Params(this);
  }
}

export class SharesTransfer__Params {
  _event: SharesTransfer;

  constructor(event: SharesTransfer) {
    this._event = event;
  }

  get validatorId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class UpdateCommissionRate extends ethereum.Event {
  get params(): UpdateCommissionRate__Params {
    return new UpdateCommissionRate__Params(this);
  }
}

export class UpdateCommissionRate__Params {
  _event: UpdateCommissionRate;

  constructor(event: UpdateCommissionRate) {
    this._event = event;
  }

  get validatorId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newCommissionRate(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get oldCommissionRate(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class EventsHub extends ethereum.SmartContract {
  static bind(address: Address): EventsHub {
    return new EventsHub("EventsHub", address);
  }

  registry(): Address {
    let result = super.call("registry", "registry():(address)", []);

    return result[0].toAddress();
  }

  try_registry(): ethereum.CallResult<Address> {
    let result = super.tryCall("registry", "registry():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _registry(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class LogDelegatorUnstakedWithIdCall extends ethereum.Call {
  get inputs(): LogDelegatorUnstakedWithIdCall__Inputs {
    return new LogDelegatorUnstakedWithIdCall__Inputs(this);
  }

  get outputs(): LogDelegatorUnstakedWithIdCall__Outputs {
    return new LogDelegatorUnstakedWithIdCall__Outputs(this);
  }
}

export class LogDelegatorUnstakedWithIdCall__Inputs {
  _call: LogDelegatorUnstakedWithIdCall;

  constructor(call: LogDelegatorUnstakedWithIdCall) {
    this._call = call;
  }

  get validatorId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get user(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get nonce(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class LogDelegatorUnstakedWithIdCall__Outputs {
  _call: LogDelegatorUnstakedWithIdCall;

  constructor(call: LogDelegatorUnstakedWithIdCall) {
    this._call = call;
  }
}

export class LogRewardParamsCall extends ethereum.Call {
  get inputs(): LogRewardParamsCall__Inputs {
    return new LogRewardParamsCall__Inputs(this);
  }

  get outputs(): LogRewardParamsCall__Outputs {
    return new LogRewardParamsCall__Outputs(this);
  }
}

export class LogRewardParamsCall__Inputs {
  _call: LogRewardParamsCall;

  constructor(call: LogRewardParamsCall) {
    this._call = call;
  }

  get rewardDecreasePerCheckpoint(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get maxRewardedCheckpoints(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get checkpointRewardDelta(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class LogRewardParamsCall__Outputs {
  _call: LogRewardParamsCall;

  constructor(call: LogRewardParamsCall) {
    this._call = call;
  }
}

export class LogShareBurnedWithIdCall extends ethereum.Call {
  get inputs(): LogShareBurnedWithIdCall__Inputs {
    return new LogShareBurnedWithIdCall__Inputs(this);
  }

  get outputs(): LogShareBurnedWithIdCall__Outputs {
    return new LogShareBurnedWithIdCall__Outputs(this);
  }
}

export class LogShareBurnedWithIdCall__Inputs {
  _call: LogShareBurnedWithIdCall;

  constructor(call: LogShareBurnedWithIdCall) {
    this._call = call;
  }

  get validatorId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get user(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get tokens(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get nonce(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class LogShareBurnedWithIdCall__Outputs {
  _call: LogShareBurnedWithIdCall;

  constructor(call: LogShareBurnedWithIdCall) {
    this._call = call;
  }
}

export class LogSharesTransferCall extends ethereum.Call {
  get inputs(): LogSharesTransferCall__Inputs {
    return new LogSharesTransferCall__Inputs(this);
  }

  get outputs(): LogSharesTransferCall__Outputs {
    return new LogSharesTransferCall__Outputs(this);
  }
}

export class LogSharesTransferCall__Inputs {
  _call: LogSharesTransferCall;

  constructor(call: LogSharesTransferCall) {
    this._call = call;
  }

  get validatorId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get from(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class LogSharesTransferCall__Outputs {
  _call: LogSharesTransferCall;

  constructor(call: LogSharesTransferCall) {
    this._call = call;
  }
}

export class LogUpdateCommissionRateCall extends ethereum.Call {
  get inputs(): LogUpdateCommissionRateCall__Inputs {
    return new LogUpdateCommissionRateCall__Inputs(this);
  }

  get outputs(): LogUpdateCommissionRateCall__Outputs {
    return new LogUpdateCommissionRateCall__Outputs(this);
  }
}

export class LogUpdateCommissionRateCall__Inputs {
  _call: LogUpdateCommissionRateCall;

  constructor(call: LogUpdateCommissionRateCall) {
    this._call = call;
  }

  get validatorId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get newCommissionRate(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get oldCommissionRate(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class LogUpdateCommissionRateCall__Outputs {
  _call: LogUpdateCommissionRateCall;

  constructor(call: LogUpdateCommissionRateCall) {
    this._call = call;
  }
}
