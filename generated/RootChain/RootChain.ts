// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class NewHeaderBlock extends ethereum.Event {
  get params(): NewHeaderBlock__Params {
    return new NewHeaderBlock__Params(this);
  }
}

export class NewHeaderBlock__Params {
  _event: NewHeaderBlock;

  constructor(event: NewHeaderBlock) {
    this._event = event;
  }

  get proposer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get headerBlockId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get reward(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get start(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get end(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get root(): Bytes {
    return this._event.parameters[5].value.toBytes();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class ResetHeaderBlock extends ethereum.Event {
  get params(): ResetHeaderBlock__Params {
    return new ResetHeaderBlock__Params(this);
  }
}

export class ResetHeaderBlock__Params {
  _event: ResetHeaderBlock;

  constructor(event: ResetHeaderBlock) {
    this._event = event;
  }

  get proposer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get headerBlockId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class RootChain__headerBlocksResult {
  value0: Bytes;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: Address;

  constructor(
    value0: Bytes,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: Address
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromFixedBytes(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromAddress(this.value4));
    return map;
  }

  getRoot(): Bytes {
    return this.value0;
  }

  getStart(): BigInt {
    return this.value1;
  }

  getEnd(): BigInt {
    return this.value2;
  }

  getCreatedAt(): BigInt {
    return this.value3;
  }

  getProposer(): Address {
    return this.value4;
  }
}

export class RootChain extends ethereum.SmartContract {
  static bind(address: Address): RootChain {
    return new RootChain("RootChain", address);
  }

  CHAINID(): BigInt {
    let result = super.call("CHAINID", "CHAINID():(uint256)", []);

    return result[0].toBigInt();
  }

  try_CHAINID(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("CHAINID", "CHAINID():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  VOTE_TYPE(): i32 {
    let result = super.call("VOTE_TYPE", "VOTE_TYPE():(uint8)", []);

    return result[0].toI32();
  }

  try_VOTE_TYPE(): ethereum.CallResult<i32> {
    let result = super.tryCall("VOTE_TYPE", "VOTE_TYPE():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  _nextHeaderBlock(): BigInt {
    let result = super.call(
      "_nextHeaderBlock",
      "_nextHeaderBlock():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try__nextHeaderBlock(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_nextHeaderBlock",
      "_nextHeaderBlock():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  currentHeaderBlock(): BigInt {
    let result = super.call(
      "currentHeaderBlock",
      "currentHeaderBlock():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_currentHeaderBlock(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "currentHeaderBlock",
      "currentHeaderBlock():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getLastChildBlock(): BigInt {
    let result = super.call(
      "getLastChildBlock",
      "getLastChildBlock():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getLastChildBlock(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getLastChildBlock",
      "getLastChildBlock():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  headerBlocks(param0: BigInt): RootChain__headerBlocksResult {
    let result = super.call(
      "headerBlocks",
      "headerBlocks(uint256):(bytes32,uint256,uint256,uint256,address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new RootChain__headerBlocksResult(
      result[0].toBytes(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toAddress()
    );
  }

  try_headerBlocks(
    param0: BigInt
  ): ethereum.CallResult<RootChain__headerBlocksResult> {
    let result = super.tryCall(
      "headerBlocks",
      "headerBlocks(uint256):(bytes32,uint256,uint256,uint256,address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new RootChain__headerBlocksResult(
        value[0].toBytes(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toAddress()
      )
    );
  }

  heimdallId(): Bytes {
    let result = super.call("heimdallId", "heimdallId():(bytes32)", []);

    return result[0].toBytes();
  }

  try_heimdallId(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("heimdallId", "heimdallId():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  isOwner(): boolean {
    let result = super.call("isOwner", "isOwner():(bool)", []);

    return result[0].toBoolean();
  }

  try_isOwner(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isOwner", "isOwner():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  networkId(): Bytes {
    let result = super.call("networkId", "networkId():(bytes)", []);

    return result[0].toBytes();
  }

  try_networkId(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("networkId", "networkId():(bytes)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  updateDepositId(numDeposits: BigInt): BigInt {
    let result = super.call(
      "updateDepositId",
      "updateDepositId(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(numDeposits)]
    );

    return result[0].toBigInt();
  }

  try_updateDepositId(numDeposits: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "updateDepositId",
      "updateDepositId(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(numDeposits)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetHeimdallIdCall extends ethereum.Call {
  get inputs(): SetHeimdallIdCall__Inputs {
    return new SetHeimdallIdCall__Inputs(this);
  }

  get outputs(): SetHeimdallIdCall__Outputs {
    return new SetHeimdallIdCall__Outputs(this);
  }
}

export class SetHeimdallIdCall__Inputs {
  _call: SetHeimdallIdCall;

  constructor(call: SetHeimdallIdCall) {
    this._call = call;
  }

  get _heimdallId(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SetHeimdallIdCall__Outputs {
  _call: SetHeimdallIdCall;

  constructor(call: SetHeimdallIdCall) {
    this._call = call;
  }
}

export class SetNextHeaderBlockCall extends ethereum.Call {
  get inputs(): SetNextHeaderBlockCall__Inputs {
    return new SetNextHeaderBlockCall__Inputs(this);
  }

  get outputs(): SetNextHeaderBlockCall__Outputs {
    return new SetNextHeaderBlockCall__Outputs(this);
  }
}

export class SetNextHeaderBlockCall__Inputs {
  _call: SetNextHeaderBlockCall;

  constructor(call: SetNextHeaderBlockCall) {
    this._call = call;
  }

  get _value(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetNextHeaderBlockCall__Outputs {
  _call: SetNextHeaderBlockCall;

  constructor(call: SetNextHeaderBlockCall) {
    this._call = call;
  }
}

export class SlashCall extends ethereum.Call {
  get inputs(): SlashCall__Inputs {
    return new SlashCall__Inputs(this);
  }

  get outputs(): SlashCall__Outputs {
    return new SlashCall__Outputs(this);
  }
}

export class SlashCall__Inputs {
  _call: SlashCall;

  constructor(call: SlashCall) {
    this._call = call;
  }
}

export class SlashCall__Outputs {
  _call: SlashCall;

  constructor(call: SlashCall) {
    this._call = call;
  }
}

export class SubmitCheckpointCall extends ethereum.Call {
  get inputs(): SubmitCheckpointCall__Inputs {
    return new SubmitCheckpointCall__Inputs(this);
  }

  get outputs(): SubmitCheckpointCall__Outputs {
    return new SubmitCheckpointCall__Outputs(this);
  }
}

export class SubmitCheckpointCall__Inputs {
  _call: SubmitCheckpointCall;

  constructor(call: SubmitCheckpointCall) {
    this._call = call;
  }

  get data(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get sigs(): Array<Array<BigInt>> {
    return this._call.inputValues[1].value.toBigIntMatrix();
  }
}

export class SubmitCheckpointCall__Outputs {
  _call: SubmitCheckpointCall;

  constructor(call: SubmitCheckpointCall) {
    this._call = call;
  }
}

export class SubmitHeaderBlockCall extends ethereum.Call {
  get inputs(): SubmitHeaderBlockCall__Inputs {
    return new SubmitHeaderBlockCall__Inputs(this);
  }

  get outputs(): SubmitHeaderBlockCall__Outputs {
    return new SubmitHeaderBlockCall__Outputs(this);
  }
}

export class SubmitHeaderBlockCall__Inputs {
  _call: SubmitHeaderBlockCall;

  constructor(call: SubmitHeaderBlockCall) {
    this._call = call;
  }

  get data(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get sigs(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class SubmitHeaderBlockCall__Outputs {
  _call: SubmitHeaderBlockCall;

  constructor(call: SubmitHeaderBlockCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdateDepositIdCall extends ethereum.Call {
  get inputs(): UpdateDepositIdCall__Inputs {
    return new UpdateDepositIdCall__Inputs(this);
  }

  get outputs(): UpdateDepositIdCall__Outputs {
    return new UpdateDepositIdCall__Outputs(this);
  }
}

export class UpdateDepositIdCall__Inputs {
  _call: UpdateDepositIdCall;

  constructor(call: UpdateDepositIdCall) {
    this._call = call;
  }

  get numDeposits(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateDepositIdCall__Outputs {
  _call: UpdateDepositIdCall;

  constructor(call: UpdateDepositIdCall) {
    this._call = call;
  }

  get depositId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}
