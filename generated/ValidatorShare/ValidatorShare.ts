// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ValidatorShareOwnershipTransferred extends ethereum.Event {
  get params(): ValidatorShareOwnershipTransferred__Params {
    return new ValidatorShareOwnershipTransferred__Params(this);
  }
}

export class ValidatorShareOwnershipTransferred__Params {
  _event: ValidatorShareOwnershipTransferred;

  constructor(event: ValidatorShareOwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ValidatorShare__getTotalStakeResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getValue0(): BigInt {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }
}

export class ValidatorShare__restakeResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getValue0(): BigInt {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }
}

export class ValidatorShare__unbondsResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getShares(): BigInt {
    return this.value0;
  }

  getWithdrawEpoch(): BigInt {
    return this.value1;
  }
}

export class ValidatorShare__unbonds_newResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getShares(): BigInt {
    return this.value0;
  }

  getWithdrawEpoch(): BigInt {
    return this.value1;
  }
}

export class ValidatorShare extends ethereum.SmartContract {
  static bind(address: Address): ValidatorShare {
    return new ValidatorShare("ValidatorShare", address);
  }

  activeAmount(): BigInt {
    let result = super.call("activeAmount", "activeAmount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_activeAmount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("activeAmount", "activeAmount():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  allowance(owner: Address, spender: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );

    return result[0].toBigInt();
  }

  try_allowance(owner: Address, spender: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approve(spender: Address, value: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(value)
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, value: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(value)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  buyVoucher(_amount: BigInt, _minSharesToMint: BigInt): BigInt {
    let result = super.call(
      "buyVoucher",
      "buyVoucher(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_amount),
        ethereum.Value.fromUnsignedBigInt(_minSharesToMint)
      ]
    );

    return result[0].toBigInt();
  }

  try_buyVoucher(
    _amount: BigInt,
    _minSharesToMint: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "buyVoucher",
      "buyVoucher(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_amount),
        ethereum.Value.fromUnsignedBigInt(_minSharesToMint)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  commissionRate_deprecated(): BigInt {
    let result = super.call(
      "commissionRate_deprecated",
      "commissionRate_deprecated():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_commissionRate_deprecated(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "commissionRate_deprecated",
      "commissionRate_deprecated():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  decreaseAllowance(spender: Address, subtractedValue: BigInt): boolean {
    let result = super.call(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_decreaseAllowance(
    spender: Address,
    subtractedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  delegation(): boolean {
    let result = super.call("delegation", "delegation():(bool)", []);

    return result[0].toBoolean();
  }

  try_delegation(): ethereum.CallResult<boolean> {
    let result = super.tryCall("delegation", "delegation():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  eventsHub(): Address {
    let result = super.call("eventsHub", "eventsHub():(address)", []);

    return result[0].toAddress();
  }

  try_eventsHub(): ethereum.CallResult<Address> {
    let result = super.tryCall("eventsHub", "eventsHub():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  exchangeRate(): BigInt {
    let result = super.call("exchangeRate", "exchangeRate():(uint256)", []);

    return result[0].toBigInt();
  }

  try_exchangeRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("exchangeRate", "exchangeRate():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getLiquidRewards(user: Address): BigInt {
    let result = super.call(
      "getLiquidRewards",
      "getLiquidRewards(address):(uint256)",
      [ethereum.Value.fromAddress(user)]
    );

    return result[0].toBigInt();
  }

  try_getLiquidRewards(user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getLiquidRewards",
      "getLiquidRewards(address):(uint256)",
      [ethereum.Value.fromAddress(user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRewardPerShare(): BigInt {
    let result = super.call(
      "getRewardPerShare",
      "getRewardPerShare():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getRewardPerShare(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getRewardPerShare",
      "getRewardPerShare():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTotalStake(user: Address): ValidatorShare__getTotalStakeResult {
    let result = super.call(
      "getTotalStake",
      "getTotalStake(address):(uint256,uint256)",
      [ethereum.Value.fromAddress(user)]
    );

    return new ValidatorShare__getTotalStakeResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getTotalStake(
    user: Address
  ): ethereum.CallResult<ValidatorShare__getTotalStakeResult> {
    let result = super.tryCall(
      "getTotalStake",
      "getTotalStake(address):(uint256,uint256)",
      [ethereum.Value.fromAddress(user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ValidatorShare__getTotalStakeResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  increaseAllowance(spender: Address, addedValue: BigInt): boolean {
    let result = super.call(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_increaseAllowance(
    spender: Address,
    addedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  initalRewardPerShare(param0: Address): BigInt {
    let result = super.call(
      "initalRewardPerShare",
      "initalRewardPerShare(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_initalRewardPerShare(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "initalRewardPerShare",
      "initalRewardPerShare(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isOwner(): boolean {
    let result = super.call("isOwner", "isOwner():(bool)", []);

    return result[0].toBoolean();
  }

  try_isOwner(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isOwner", "isOwner():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lastCommissionUpdate_deprecated(): BigInt {
    let result = super.call(
      "lastCommissionUpdate_deprecated",
      "lastCommissionUpdate_deprecated():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_lastCommissionUpdate_deprecated(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastCommissionUpdate_deprecated",
      "lastCommissionUpdate_deprecated():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  locked(): boolean {
    let result = super.call("locked", "locked():(bool)", []);

    return result[0].toBoolean();
  }

  try_locked(): ethereum.CallResult<boolean> {
    let result = super.tryCall("locked", "locked():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  minAmount(): BigInt {
    let result = super.call("minAmount", "minAmount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_minAmount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("minAmount", "minAmount():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  restake(): ValidatorShare__restakeResult {
    let result = super.call("restake", "restake():(uint256,uint256)", []);

    return new ValidatorShare__restakeResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_restake(): ethereum.CallResult<ValidatorShare__restakeResult> {
    let result = super.tryCall("restake", "restake():(uint256,uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ValidatorShare__restakeResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  rewardPerShare(): BigInt {
    let result = super.call("rewardPerShare", "rewardPerShare():(uint256)", []);

    return result[0].toBigInt();
  }

  try_rewardPerShare(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "rewardPerShare",
      "rewardPerShare():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  slash(
    validatorStake: BigInt,
    delegatedAmount: BigInt,
    totalAmountToSlash: BigInt
  ): BigInt {
    let result = super.call(
      "slash",
      "slash(uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(validatorStake),
        ethereum.Value.fromUnsignedBigInt(delegatedAmount),
        ethereum.Value.fromUnsignedBigInt(totalAmountToSlash)
      ]
    );

    return result[0].toBigInt();
  }

  try_slash(
    validatorStake: BigInt,
    delegatedAmount: BigInt,
    totalAmountToSlash: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "slash",
      "slash(uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(validatorStake),
        ethereum.Value.fromUnsignedBigInt(delegatedAmount),
        ethereum.Value.fromUnsignedBigInt(totalAmountToSlash)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  stakeManager(): Address {
    let result = super.call("stakeManager", "stakeManager():(address)", []);

    return result[0].toAddress();
  }

  try_stakeManager(): ethereum.CallResult<Address> {
    let result = super.tryCall("stakeManager", "stakeManager():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  stakingLogger(): Address {
    let result = super.call("stakingLogger", "stakingLogger():(address)", []);

    return result[0].toAddress();
  }

  try_stakingLogger(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "stakingLogger",
      "stakingLogger():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  totalStake_deprecated(): BigInt {
    let result = super.call(
      "totalStake_deprecated",
      "totalStake_deprecated():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalStake_deprecated(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalStake_deprecated",
      "totalStake_deprecated():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(to: Address, value: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(value)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(to: Address, value: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(value)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(from: Address, to: Address, value: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(value)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    from: Address,
    to: Address,
    value: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(value)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  unbondNonces(param0: Address): BigInt {
    let result = super.call("unbondNonces", "unbondNonces(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_unbondNonces(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "unbondNonces",
      "unbondNonces(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  unbonds(param0: Address): ValidatorShare__unbondsResult {
    let result = super.call("unbonds", "unbonds(address):(uint256,uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return new ValidatorShare__unbondsResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_unbonds(
    param0: Address
  ): ethereum.CallResult<ValidatorShare__unbondsResult> {
    let result = super.tryCall(
      "unbonds",
      "unbonds(address):(uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ValidatorShare__unbondsResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  unbonds_new(
    param0: Address,
    param1: BigInt
  ): ValidatorShare__unbonds_newResult {
    let result = super.call(
      "unbonds_new",
      "unbonds_new(address,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return new ValidatorShare__unbonds_newResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_unbonds_new(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<ValidatorShare__unbonds_newResult> {
    let result = super.tryCall(
      "unbonds_new",
      "unbonds_new(address,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ValidatorShare__unbonds_newResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  validatorId(): BigInt {
    let result = super.call("validatorId", "validatorId():(uint256)", []);

    return result[0].toBigInt();
  }

  try_validatorId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("validatorId", "validatorId():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  validatorRewards_deprecated(): BigInt {
    let result = super.call(
      "validatorRewards_deprecated",
      "validatorRewards_deprecated():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_validatorRewards_deprecated(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "validatorRewards_deprecated",
      "validatorRewards_deprecated():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  withdrawExchangeRate(): BigInt {
    let result = super.call(
      "withdrawExchangeRate",
      "withdrawExchangeRate():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_withdrawExchangeRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "withdrawExchangeRate",
      "withdrawExchangeRate():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  withdrawPool(): BigInt {
    let result = super.call("withdrawPool", "withdrawPool():(uint256)", []);

    return result[0].toBigInt();
  }

  try_withdrawPool(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("withdrawPool", "withdrawPool():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  withdrawShares(): BigInt {
    let result = super.call("withdrawShares", "withdrawShares():(uint256)", []);

    return result[0].toBigInt();
  }

  try_withdrawShares(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "withdrawShares",
      "withdrawShares():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class BuyVoucherCall extends ethereum.Call {
  get inputs(): BuyVoucherCall__Inputs {
    return new BuyVoucherCall__Inputs(this);
  }

  get outputs(): BuyVoucherCall__Outputs {
    return new BuyVoucherCall__Outputs(this);
  }
}

export class BuyVoucherCall__Inputs {
  _call: BuyVoucherCall;

  constructor(call: BuyVoucherCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _minSharesToMint(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class BuyVoucherCall__Outputs {
  _call: BuyVoucherCall;

  constructor(call: BuyVoucherCall) {
    this._call = call;
  }

  get amountToDeposit(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class DecreaseAllowanceCall extends ethereum.Call {
  get inputs(): DecreaseAllowanceCall__Inputs {
    return new DecreaseAllowanceCall__Inputs(this);
  }

  get outputs(): DecreaseAllowanceCall__Outputs {
    return new DecreaseAllowanceCall__Outputs(this);
  }
}

export class DecreaseAllowanceCall__Inputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get subtractedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DecreaseAllowanceCall__Outputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class DrainCall extends ethereum.Call {
  get inputs(): DrainCall__Inputs {
    return new DrainCall__Inputs(this);
  }

  get outputs(): DrainCall__Outputs {
    return new DrainCall__Outputs(this);
  }
}

export class DrainCall__Inputs {
  _call: DrainCall;

  constructor(call: DrainCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get destination(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class DrainCall__Outputs {
  _call: DrainCall;

  constructor(call: DrainCall) {
    this._call = call;
  }
}

export class IncreaseAllowanceCall extends ethereum.Call {
  get inputs(): IncreaseAllowanceCall__Inputs {
    return new IncreaseAllowanceCall__Inputs(this);
  }

  get outputs(): IncreaseAllowanceCall__Outputs {
    return new IncreaseAllowanceCall__Outputs(this);
  }
}

export class IncreaseAllowanceCall__Inputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get addedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class IncreaseAllowanceCall__Outputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _validatorId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _stakingLogger(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _stakeManager(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class LockCall extends ethereum.Call {
  get inputs(): LockCall__Inputs {
    return new LockCall__Inputs(this);
  }

  get outputs(): LockCall__Outputs {
    return new LockCall__Outputs(this);
  }
}

export class LockCall__Inputs {
  _call: LockCall;

  constructor(call: LockCall) {
    this._call = call;
  }
}

export class LockCall__Outputs {
  _call: LockCall;

  constructor(call: LockCall) {
    this._call = call;
  }
}

export class MigrateInCall extends ethereum.Call {
  get inputs(): MigrateInCall__Inputs {
    return new MigrateInCall__Inputs(this);
  }

  get outputs(): MigrateInCall__Outputs {
    return new MigrateInCall__Outputs(this);
  }
}

export class MigrateInCall__Inputs {
  _call: MigrateInCall;

  constructor(call: MigrateInCall) {
    this._call = call;
  }

  get user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class MigrateInCall__Outputs {
  _call: MigrateInCall;

  constructor(call: MigrateInCall) {
    this._call = call;
  }
}

export class MigrateOutCall extends ethereum.Call {
  get inputs(): MigrateOutCall__Inputs {
    return new MigrateOutCall__Inputs(this);
  }

  get outputs(): MigrateOutCall__Outputs {
    return new MigrateOutCall__Outputs(this);
  }
}

export class MigrateOutCall__Inputs {
  _call: MigrateOutCall;

  constructor(call: MigrateOutCall) {
    this._call = call;
  }

  get user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class MigrateOutCall__Outputs {
  _call: MigrateOutCall;

  constructor(call: MigrateOutCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RestakeCall extends ethereum.Call {
  get inputs(): RestakeCall__Inputs {
    return new RestakeCall__Inputs(this);
  }

  get outputs(): RestakeCall__Outputs {
    return new RestakeCall__Outputs(this);
  }
}

export class RestakeCall__Inputs {
  _call: RestakeCall;

  constructor(call: RestakeCall) {
    this._call = call;
  }
}

export class RestakeCall__Outputs {
  _call: RestakeCall;

  constructor(call: RestakeCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get value1(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class SellVoucherCall extends ethereum.Call {
  get inputs(): SellVoucherCall__Inputs {
    return new SellVoucherCall__Inputs(this);
  }

  get outputs(): SellVoucherCall__Outputs {
    return new SellVoucherCall__Outputs(this);
  }
}

export class SellVoucherCall__Inputs {
  _call: SellVoucherCall;

  constructor(call: SellVoucherCall) {
    this._call = call;
  }

  get claimAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get maximumSharesToBurn(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SellVoucherCall__Outputs {
  _call: SellVoucherCall;

  constructor(call: SellVoucherCall) {
    this._call = call;
  }
}

export class SellVoucher_newCall extends ethereum.Call {
  get inputs(): SellVoucher_newCall__Inputs {
    return new SellVoucher_newCall__Inputs(this);
  }

  get outputs(): SellVoucher_newCall__Outputs {
    return new SellVoucher_newCall__Outputs(this);
  }
}

export class SellVoucher_newCall__Inputs {
  _call: SellVoucher_newCall;

  constructor(call: SellVoucher_newCall) {
    this._call = call;
  }

  get claimAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get maximumSharesToBurn(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SellVoucher_newCall__Outputs {
  _call: SellVoucher_newCall;

  constructor(call: SellVoucher_newCall) {
    this._call = call;
  }
}

export class SlashCall extends ethereum.Call {
  get inputs(): SlashCall__Inputs {
    return new SlashCall__Inputs(this);
  }

  get outputs(): SlashCall__Outputs {
    return new SlashCall__Outputs(this);
  }
}

export class SlashCall__Inputs {
  _call: SlashCall;

  constructor(call: SlashCall) {
    this._call = call;
  }

  get validatorStake(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get delegatedAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get totalAmountToSlash(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SlashCall__Outputs {
  _call: SlashCall;

  constructor(call: SlashCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UnlockCall extends ethereum.Call {
  get inputs(): UnlockCall__Inputs {
    return new UnlockCall__Inputs(this);
  }

  get outputs(): UnlockCall__Outputs {
    return new UnlockCall__Outputs(this);
  }
}

export class UnlockCall__Inputs {
  _call: UnlockCall;

  constructor(call: UnlockCall) {
    this._call = call;
  }
}

export class UnlockCall__Outputs {
  _call: UnlockCall;

  constructor(call: UnlockCall) {
    this._call = call;
  }
}

export class UnstakeClaimTokensCall extends ethereum.Call {
  get inputs(): UnstakeClaimTokensCall__Inputs {
    return new UnstakeClaimTokensCall__Inputs(this);
  }

  get outputs(): UnstakeClaimTokensCall__Outputs {
    return new UnstakeClaimTokensCall__Outputs(this);
  }
}

export class UnstakeClaimTokensCall__Inputs {
  _call: UnstakeClaimTokensCall;

  constructor(call: UnstakeClaimTokensCall) {
    this._call = call;
  }
}

export class UnstakeClaimTokensCall__Outputs {
  _call: UnstakeClaimTokensCall;

  constructor(call: UnstakeClaimTokensCall) {
    this._call = call;
  }
}

export class UnstakeClaimTokens_newCall extends ethereum.Call {
  get inputs(): UnstakeClaimTokens_newCall__Inputs {
    return new UnstakeClaimTokens_newCall__Inputs(this);
  }

  get outputs(): UnstakeClaimTokens_newCall__Outputs {
    return new UnstakeClaimTokens_newCall__Outputs(this);
  }
}

export class UnstakeClaimTokens_newCall__Inputs {
  _call: UnstakeClaimTokens_newCall;

  constructor(call: UnstakeClaimTokens_newCall) {
    this._call = call;
  }

  get unbondNonce(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UnstakeClaimTokens_newCall__Outputs {
  _call: UnstakeClaimTokens_newCall;

  constructor(call: UnstakeClaimTokens_newCall) {
    this._call = call;
  }
}

export class UpdateDelegationCall extends ethereum.Call {
  get inputs(): UpdateDelegationCall__Inputs {
    return new UpdateDelegationCall__Inputs(this);
  }

  get outputs(): UpdateDelegationCall__Outputs {
    return new UpdateDelegationCall__Outputs(this);
  }
}

export class UpdateDelegationCall__Inputs {
  _call: UpdateDelegationCall;

  constructor(call: UpdateDelegationCall) {
    this._call = call;
  }

  get _delegation(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class UpdateDelegationCall__Outputs {
  _call: UpdateDelegationCall;

  constructor(call: UpdateDelegationCall) {
    this._call = call;
  }
}

export class WithdrawRewardsCall extends ethereum.Call {
  get inputs(): WithdrawRewardsCall__Inputs {
    return new WithdrawRewardsCall__Inputs(this);
  }

  get outputs(): WithdrawRewardsCall__Outputs {
    return new WithdrawRewardsCall__Outputs(this);
  }
}

export class WithdrawRewardsCall__Inputs {
  _call: WithdrawRewardsCall;

  constructor(call: WithdrawRewardsCall) {
    this._call = call;
  }
}

export class WithdrawRewardsCall__Outputs {
  _call: WithdrawRewardsCall;

  constructor(call: WithdrawRewardsCall) {
    this._call = call;
  }
}
